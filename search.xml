<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>NexT主题插件hexo-next-photos</title>
    <url>/hexo//hexo-next-photos/</url>
    <content><![CDATA[<blockquote>
<p>hexo-next-photos插件中文说明</p>
</blockquote>
<a id="more"></a>
<h1 id="hexo-next-photos"><a class="markdownIt-Anchor" href="#hexo-next-photos"></a> hexo-next-photos</h1>
<h2 id="升级说明"><a class="markdownIt-Anchor" href="#升级说明"></a> 升级说明</h2>
<ul>
<li>现在该插件支持图床链接</li>
<li>升级此插件请认真阅读本文后进行升级，避免出现不必要的麻烦，若有问题请在下方留言，我会认真查看</li>
</ul>
<h2 id="插件效果"><a class="markdownIt-Anchor" href="#插件效果"></a> 插件效果</h2>
<p><a href="https://jygzyc.github.io/photos/">https://jygzyc.github.io/photos/</a></p>
<h2 id="如何使用"><a class="markdownIt-Anchor" href="#如何使用"></a> 如何使用</h2>
<h3 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h3>
<ul>
<li>执行 <code>npm install hexo-next-photos --save</code> 命令</li>
<li>然后需要你去修改NexT主题模板，添加如下内容至文件。</li>
</ul>
<h3 id="body-endswig"><a class="markdownIt-Anchor" href="#body-endswig"></a> body-end.swig</h3>
<ul>
<li>如果之前安装了此插件，请删除 <code>/source/_data/body-end.swig</code>中如下代码</li>
<li>若之前并没有安装过此插件，请确保该文件已被创建（无需添加内容）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if page.type &#x3D;&#x3D;&#x3D;&#39;photos&#39; %&#125;</span><br><span class="line">  &lt;script src&#x3D;&quot;&#x2F;js&#x2F;photo.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="stylesstyl"><a class="markdownIt-Anchor" href="#stylesstyl"></a> styles.styl</h3>
<ul>
<li>如果之前安装了此插件，请删除 <code>/source/_data/styles.styl</code>中如下代码</li>
<li>若之前并没有安装过此插件，请确保该文件已被创建（无需添加内容）</li>
</ul>
<figure class="highlight styl"><table><tr><td class="code"><pre><span class="line"><span class="comment">//album style</span></span><br><span class="line"><span class="selector-class">.ImageGrid</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">max-width</span>:<span class="number">1040px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">column-count</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">column-gap</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">@media (<span class="attribute">min-width</span>: <span class="number">500px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.ImageGrid</span> &#123;</span><br><span class="line">        <span class="attribute">column-count</span>: <span class="number">2</span>; <span class="comment">// two columns on larger phones</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.card</span> &#123;</span><br><span class="line">        <span class="attribute">break-inside</span>: avoid;</span><br><span class="line">        <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#ddd</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@media (<span class="attribute">min-width</span>: <span class="number">800px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.ImageGrid</span> &#123;</span><br><span class="line">        <span class="attribute">column-count</span>: <span class="number">3</span>; <span class="comment">// two columns on larger phones</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.card</span> &#123;</span><br><span class="line">        <span class="attribute">break-inside</span>: avoid;</span><br><span class="line">        <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#ddd</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="attribute">break-inside</span>: avoid;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ImageInCard</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.TextInCard</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.8</span>);</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">70%</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="_configyml"><a class="markdownIt-Anchor" href="#_configyml"></a> _config.yml</h3>
<ul>
<li>在你的博客根目录，找到 _config.yml 文件然后添加如下的配置项，并且配置相应的URL</li>
<li>若之前安装过此插件，请重置config配置如下：</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-next-photos</span></span><br><span class="line"><span class="attr">hexo_next_photos:</span></span><br><span class="line">  <span class="attr">modes         :</span> <span class="string">figureBed</span> <span class="comment"># or repository</span></span><br><span class="line">  <span class="attr">pictureUrl    :</span>           <span class="comment"># if repositry, please put your repos URL here</span></span><br><span class="line">  <span class="attr">pictureDirPath:</span>           <span class="comment"># the dir put your photos or linkList.txt file, default: Your blog path/pictureDir/</span></span><br></pre></td></tr></table></figure>
<p>repos例子：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hexo_next_photos:</span></span><br><span class="line">  <span class="attr">modes:</span>          <span class="string">repository</span></span><br><span class="line">  <span class="attr">pictureUrl:</span>     <span class="string">https://dev.tencent.com/u/username/p/repos/git/raw/master/photos/</span> <span class="comment"># photos url</span></span><br><span class="line">  <span class="attr">pictureDirPath:</span> <span class="string">photoDir</span> <span class="comment"># photo dir path is 'Your blog path/photoDir/'</span></span><br></pre></td></tr></table></figure>
<p>图床例子：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-next-photos</span></span><br><span class="line"><span class="attr">hexo_next_photos:</span></span><br><span class="line">  <span class="attr">modes         :</span> <span class="string">figureBed</span> </span><br><span class="line">  <span class="attr">pictureUrl    :</span> </span><br><span class="line">  <span class="attr">pictureDirPath:</span> <span class="string">testDir</span>   <span class="comment"># your linkList file is 'Your blog path/testDir/linkList.txt'</span></span><br></pre></td></tr></table></figure>
<h3 id="nextyml"><a class="markdownIt-Anchor" href="#nextyml"></a> next.yml</h3>
<ul>
<li>方法一：在你的博客主题目录，找到 _config.yml 文件然后添加如下的配置项</li>
<li>方法二（推荐）：在<code>/source/_data/</code>目录下新建<code>next.yml</code>，并将主题配置文件的内容全部复制过来，然后再修改下列配置项（之前已经新建过<code>next.yml</code>的直接修改就可以了）</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line"><span class="bullet">-</span>  <span class="comment">#bodyEnd: source/_data/body-end.swig</span></span><br><span class="line"><span class="string">+</span>  <span class="attr">bodyEnd:</span> <span class="string">source/_data/body-end.swig</span></span><br><span class="line"><span class="bullet">-</span>  <span class="comment">#style: source/_data/styles.styl</span></span><br><span class="line"><span class="string">+</span>  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Third Party Plugins &amp; Services Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.org/docs/third-party-services/</span></span><br><span class="line"><span class="comment"># You may need to install dependencies or set CDN URLs in `vendors`</span></span><br><span class="line"><span class="comment"># There are two different CDN providers by default:</span></span><br><span class="line"><span class="comment">#   - jsDelivr (cdn.jsdelivr.net), works everywhere even in China</span></span><br><span class="line"><span class="comment">#   - CDNJS (cdnjs.cloudflare.com), provided by cloudflare</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">fancybox:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">+</span> <span class="attr">fancybox:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">lazyload:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">+</span> <span class="attr">lazyload:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="comment"># FancyBox</span></span><br><span class="line">  <span class="comment"># jquery: //cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js</span></span><br><span class="line">  <span class="comment"># fancybox: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js</span></span><br><span class="line">  <span class="comment"># fancybox_css: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css</span></span><br><span class="line">  <span class="attr">jquery:</span></span><br><span class="line">  <span class="attr">fancybox:</span>  <span class="comment"># choose a faster CDN</span></span><br><span class="line">  <span class="attr">fancybox_css:</span> <span class="comment"># choose a faster CDN</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Lazyload</span></span><br><span class="line">  <span class="comment"># lazyload: //cdn.jsdelivr.net/npm/lozad@1/dist/lozad.min.js</span></span><br><span class="line">  <span class="comment"># lazyload: //cdnjs.cloudflare.com/ajax/libs/lozad.js/1.9.0/lozad.min.js</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="comment"># choose a faster CDN</span></span><br></pre></td></tr></table></figure>
<h3 id="新建页面"><a class="markdownIt-Anchor" href="#新建页面"></a> 新建页面</h3>
<ul>
<li>新建照片页面 <code>hexo new page photos</code>，新建 <code>/source/photos/index.md</code>, 添加如下代码:</li>
</ul>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Photos</span><br><span class="line">type: photos</span><br><span class="line">---</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ImageGrid"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>添加如下代码至主题配置文件（前面提到的<code>next.yml</code>）</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="string">+</span> <span class="attr">photos:</span> <span class="string">/photos/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-camera</span></span><br></pre></td></tr></table></figure>
<h3 id="linklisttxt文件图床模式使用"><a class="markdownIt-Anchor" href="#linklisttxt文件图床模式使用"></a> linkList.txt文件（图床模式使用）</h3>
<ul>
<li>新建linkList.txt文件在config指定的目录下，若没有指定，默认为<code>pictureDir</code>，填入图床中图片的链接，样例如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2020&#x2F;05&#x2F;21&#x2F;YbueyT.jpg</span><br><span class="line">https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2020&#x2F;05&#x2F;21&#x2F;YbuZlV.jpg</span><br><span class="line">https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2020&#x2F;05&#x2F;21&#x2F;YbuVS0.jpg</span><br><span class="line">https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2020&#x2F;05&#x2F;21&#x2F;YbukYn.jpg</span><br><span class="line">https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2020&#x2F;05&#x2F;21&#x2F;YbuFFs.jpg</span><br><span class="line">https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2020&#x2F;05&#x2F;21&#x2F;YbuPoj.jpg</span><br><span class="line">https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2020&#x2F;05&#x2F;21&#x2F;YbuCwQ.jpg</span><br><span class="line">https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2020&#x2F;05&#x2F;21&#x2F;Ybu9eg.jpg</span><br><span class="line">https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2020&#x2F;05&#x2F;21&#x2F;YbuSOS.jpg</span><br><span class="line">https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2020&#x2F;05&#x2F;21&#x2F;Ybnzy8.jpg</span><br><span class="line">https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2020&#x2F;05&#x2F;21&#x2F;YbnxQf.jpg</span><br><span class="line">https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2020&#x2F;05&#x2F;21&#x2F;YbnvSP.jpg</span><br><span class="line">https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2020&#x2F;05&#x2F;21&#x2F;YbnXWt.jpg</span><br></pre></td></tr></table></figure>
<h3 id="放入照片repos模式使用"><a class="markdownIt-Anchor" href="#放入照片repos模式使用"></a> 放入照片（repos模式使用）</h3>
<ul>
<li>新建 <code>originPhotos</code> 文件夹，放在博客根目录</li>
<li>放入照片</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blog  </span><br><span class="line">└───node_modules&#x2F;</span><br><span class="line">└───scaffolds&#x2F;</span><br><span class="line">│   ...</span><br><span class="line">│   _config.yml</span><br><span class="line">└───oringinPhotos&#x2F;</span><br><span class="line">│   │   Put your photos here, please keep your photos names same as your URL photos names</span><br><span class="line">|   |   ...</span><br><span class="line">|   package.json</span><br><span class="line">|   ...</span><br></pre></td></tr></table></figure>
<p>这样，我们就可以使用插件了。</p>
<h2 id="存在的问题"><a class="markdownIt-Anchor" href="#存在的问题"></a> 存在的问题</h2>
<ul>
<li>图床模式下，图床的响应速度同图床本身有关，存在速度较慢的情况</li>
</ul>
<h2 id="致谢"><a class="markdownIt-Anchor" href="#致谢"></a> 致谢</h2>
<p><a href="https://github.com/MikeCoder/hexo-tag-cloud" target="_blank" rel="noopener">hexo-tag-cloud</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>UEFI原理与实践笔记-Hello UEFI</title>
    <url>/UEFI/HelloUEFI/</url>
    <content><![CDATA[<blockquote>
<p>UEFI原理与实践笔记（二）-Hello UEFI<br />
在上一篇<a href="/UEFI/UEFI%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" title="UEFI原理与实践笔记-开发环境搭建">UEFI原理与实践笔记-开发环境搭建</a>中我们已经了解了EDK2的环境搭建，这一节讲一下UEFI的基础工程。</p>
</blockquote>
<a id="more"></a>
<h1 id="基础概念"><a class="markdownIt-Anchor" href="#基础概念"></a> 基础概念</h1>
<p>在EDK2的根目录下，有许多以<code>*Pkg</code>命名的文件夹，Pkg的全称是Package，由一组模块，平台描述文件（<code>.dsc</code>文件），包声明文件（<code>.dec</code>文件）组成的集合。模块是UEFI系统的一个特色，模块以<code>.efi</code>可执行文件的形式像插件一样动态加载到UEFI内核中。对应到源文件，EDk2中的每个工程模块由元数据文件（<code>.inf</code>文件）和源文件组成。</p>
<p>模块中的（<code>.inf</code>）文件用于自动编译源代码，与Makefile的功能类似；包相当于VS中的项目，<code>.dsc</code>文件相当于vs中的<code>.sln</code>，<code>.inf</code>文件相当于vs中的<code>.proj</code>文件。</p>
<h1 id="uefi标准应用程序工程模块"><a class="markdownIt-Anchor" href="#uefi标准应用程序工程模块"></a> UEFI标准应用程序工程模块</h1>
<p>标准应用工程模块是最常见的应用工程模块，我们仿照<code>ShellPkg</code>，创建一个最简单的UEFI应用程序———Hello UEFI作为示例，来介绍UEFI标准应用程序工程的格式。</p>
<p>我们先看一下<code>ShellPkg</code>的目录结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:.</span><br><span class="line">├─.vs&#x2F;</span><br><span class="line">├─Application&#x2F;</span><br><span class="line">│  ├─Shell</span><br><span class="line">│     ├─Shell.inf</span><br><span class="line">│     └─ ...</span><br><span class="line">├─DynamicCommand&#x2F;</span><br><span class="line">├─Include&#x2F;</span><br><span class="line">├─Library&#x2F;</span><br><span class="line">├─ShellPkg.ci.yaml</span><br><span class="line">├─ShellPkg.dec</span><br><span class="line">└─ShellPkg.dsc</span><br></pre></td></tr></table></figure>
<p>在这里我省略了一些不必要的结构，因为主要目的是进行参照。</p>
<h1 id="创建基础结构"><a class="markdownIt-Anchor" href="#创建基础结构"></a> 创建基础结构</h1>
<p>在EDK2目录下创建新的包，这里我命名为<code>HelloUefiPkg</code>。紧接着仿照<code>ShellPkg</code>，在包内创建模块<code>Test</code>。</p>
<h2 id="入口函数"><a class="markdownIt-Anchor" href="#入口函数"></a> 入口函数</h2>
<p>我们在<code>HelloUefiPkg</code>目录下创建一个空文件夹<code>Test</code>后，然后添加一个<code>Test.c</code>的源文件，代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Uefi.h&gt;</span></span></span><br><span class="line"><span class="function">EFI_STATUS <span class="title">UefiMain</span><span class="params">(IN EFI_HANDLE ImageHandle, IN EFI_SYSTEM_TABLE* SystemTable)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SystemTable-&gt;ConOut-&gt;OutputString(SystemTable-&gt;ConOut, <span class="string">L"Hello Uefi\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> EFI_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下文中会对上面的代码作出解释，但是在这之前我们需要能够使用vs来进行代码编辑。<br />
打开vs2019，在<code>文件-&gt;新建-&gt;从现有代码创建项目</code>中选择之前写的<code>Test.c</code>代码，创建<code>Test</code>项目，成功之后目录结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:.</span><br><span class="line">│  Test.c</span><br><span class="line">│  Test.sln</span><br><span class="line">│  Test.vcxproj</span><br><span class="line">│  Test.vcxproj.filters</span><br><span class="line">│  Test.vcxproj.user</span><br><span class="line">│</span><br><span class="line">├─.vs</span><br><span class="line">└─Debug</span><br></pre></td></tr></table></figure>
<p>这时候如果你用vs查看代码，会发现很多报错，这是因为UEFI定义的数据类型和数据结构都没有引入，我们右击项目名，点击<code>属性</code>，在<code>VC++ 目录 -&gt; 常规 -&gt; 包含目录</code>中添加如下两个目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\edk2\MdePkg\Include\X64</span><br><span class="line">C:\edk2\MdePkg\Include</span><br></pre></td></tr></table></figure>
<p>如下图所示：</p>
<p><img data-src="VS_setting.png" alt="VS2019设置" /></p>
<p>随后我们就可以看到我们可以正常地编辑UEFI代码了，接下来我们对代码做出解释。<br />
上文代码可以理解为C语言中最简单的Hello world代码，一般来说，标准应用程序至少要包含以下两个部分：</p>
<ul>
<li>1）<strong>头文件</strong>：所有的UEFI程序都要包含头文件<code>Uefi.h</code>。<code>Uefi.h</code>定义了UEFI基本数据类型及核心数据结构。我们可以查看<code>Uefi.h</code>的代码如下：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __PI_UEFI_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __PI_UEFI_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Uefi/UefiBaseType.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Uefi/UefiSpec.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>其中，<code>UefiBaseType.h</code>头文件定义了UEFI基础的数据结构，<code>UefiSpec.h</code>定义了UEFI一些函数的接口。</p>
<ul>
<li>
<p>2） <strong>入口函数</strong>：UEFI标准应用程序的入口函数通常是UefiMain，当然也可以由开发者指定为不同的名称，关于这一项可以在工程文件<code>Test.inf</code>中指定，下文会对工程文件进行详细介绍，这里我们继续探讨入口函数。虽然入口函数的函数名可以发生变化，但其函数签名（即返回值类型和参数列表类型）都不能变化。</p>
<ul>
<li>
<p><strong>入口函数的返回值类型是<code>EFI_STATUS</code></strong></p>
<ul>
<li>
<p>在UEFI程序中基本所有的返回值类型都是<code>EFI_STATUS</code>。它的本质是无符号长整数。我们可以查看其定义代码如下：</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">C:\edk2\MdePkg\Include\Uefi\UefiBaseType.h</span><br><span class="line"><span class="keyword">typedef</span> RETURN_STATUS             EFI_STATUS;</span><br><span class="line"></span><br><span class="line">C:\edk2\MdePkg\Include\Base.h</span><br><span class="line"><span class="keyword">typedef</span> UINTN RETURN_STATUS;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>最高位为1时其值为错误代码，为0时表示非错误值。通过宏<code>EFI_ERROR(Status)</code>可以判断返回值Status是否为错误码。若Status为错误码，<code>EFI_ERROR(Status)</code>返回真，否则返回假。</p>
</li>
<li>
<p><code>EFI_SUCCESS</code>为预定义常量，值为0，表示没有错误的状态值或返回值。</p>
</li>
</ul>
</li>
<li>
<p><strong>入口函数的参数<code>ImageHandle</code>和<code>SystemTable</code></strong></p>
<ul>
<li>
<p><code>.efi</code>文件（UEFI应用程序或UEFI驱动程序）加载到内存后生成的对象成为Image（映像）。<code>ImageHandle</code>是Image对象的句柄，作为模块入口函数的参数，它表示模块自身加载到内存后生成的Image对象。</p>
</li>
<li>
<p>SystemTable是程序同UEFI内核交互的桥梁，通过它可以获得UEFI提供的各种服务，比如启动服务（Boot Services，BT）和运行时服务（Runtime Services，RT）。SystemTable是UEFI内核中的一个全局结构体，其定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C:\edk2\MdePkg\Include\Uefi\UefiSpec.h</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// EFI System Table</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    EFI_TABLE_HEADER                  Hdr;                  <span class="comment">//标准UEFI表头</span></span><br><span class="line">    CHAR16                            *FirmwareVendor;      <span class="comment">//固件提供商</span></span><br><span class="line">    UINT32                            FirmwareRevision;     <span class="comment">//固件版本号</span></span><br><span class="line">    EFI_HANDLE                        ConsoleInHandle;      <span class="comment">//输入控制台设备的句柄</span></span><br><span class="line">    EFI_SIMPLE_TEXT_INPUT_PROTOCOL    *ConIn;</span><br><span class="line">    EFI_HANDLE                        ConsoleOutHandle;     <span class="comment">//输出控制台设备的句柄</span></span><br><span class="line">    EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL   *ConOut;</span><br><span class="line">    EFI_HANDLE                        StandardErrorHandle;  <span class="comment">//标准错误控制台设备</span></span><br><span class="line">    EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL   *StdErr;</span><br><span class="line">    EFI_RUNTIME_SERVICES              *RuntimeServices;     <span class="comment">//运行时服务表</span></span><br><span class="line">    EFI_BOOT_SERVICES                 *BootServices;        <span class="comment">//启动服务表</span></span><br><span class="line">    UINTN                             NumberOfTableEntries; <span class="comment">//ConfigurationTable数组大小</span></span><br><span class="line">    EFI_CONFIGURATION_TABLE           *ConfigurationTable;  <span class="comment">//系统配置表数组</span></span><br><span class="line">&#125; EFI_SYSTEM_TABLE;</span><br></pre></td></tr></table></figure>
<p>系统表的详细信息会在之后的文章讲解，在这里我们只需要知道，系统表是UEFI内核的全局结构体，其指针作为程序映像（Image）入口函数的参数传递到用户空间，下文会说明Application Entry的过程。</p>
</li>
</ul>
</li>
</ul>
<p>向标准输出设备打印字符串是通过SystemTable的ConOut提供的服务完成的。ConOut是<code>EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL</code>的一个实例。<code>EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL</code>的主要功能是控制字符输出设备。向输出设备打印字符串是通过ConOut提供的OutputString服务完成的。该服务的函数原型如下：</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C:\edk2\MdePkg\Include\Protocol\SimpleTextOut.h</span></span><br><span class="line"><span class="keyword">typedef</span></span><br><span class="line">EFI_STATUS</span><br><span class="line">(EFIAPI *EFI_TEXT_STRING)(</span><br><span class="line">  IN EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL        *This,</span><br><span class="line">  IN CHAR16                                 *<span class="keyword">String</span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure>
<p>关于Protocol不是我们这一节的重点，我们将放到后续讲解。简而言之，这条打印语句的意思就是通过<code>SystemTable -&gt; ConOut -&gt; OutputString</code>服务将字符串L&quot;Hello Uefi&quot;打印到SystemTable -&gt; ConOut所控制的字符输出设备。</p>
</li>
</ul>
<h2 id="工程文件"><a class="markdownIt-Anchor" href="#工程文件"></a> 工程文件</h2>
<p>要编译<code>Test.c</code>，我们还需要编写<code>.inf</code>文件（Module Information File）。<code>.inf</code>文件是模块的工程文件，作用相当于Makefile文件或vs的<code>.proj</code>文件，用于知道EDK2编译工具自动编译模块。<br />
首先让我们看一下<code>Shell.inf</code>的文件内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># C:\edk2\ShellPkg\Application\Shell\Shell.inf</span><br><span class="line">[Defines]</span><br><span class="line">  INF_VERSION                    &#x3D; 0x00010006</span><br><span class="line">  BASE_NAME                      &#x3D; Shell</span><br><span class="line">  FILE_GUID                      &#x3D; 7C04A583-9E3E-4f1c-AD65-E05268D0B4D1 # gUefiShellFileGuid</span><br><span class="line">  MODULE_TYPE                    &#x3D; UEFI_APPLICATION</span><br><span class="line">  VERSION_STRING                 &#x3D; 1.0</span><br><span class="line">  ENTRY_POINT                    &#x3D; UefiMain</span><br><span class="line">[Sources]</span><br><span class="line">  Shell.c</span><br><span class="line">  Shell.h</span><br><span class="line">  ...</span><br><span class="line">[Packages]</span><br><span class="line">  MdePkg&#x2F;MdePkg.dec</span><br><span class="line">  ShellPkg&#x2F;ShellPkg.dec</span><br><span class="line">  MdeModulePkg&#x2F;MdeModulePkg.dec</span><br><span class="line">[LibraryClasses]</span><br><span class="line">  BaseLib</span><br><span class="line">  UefiApplicationEntryPoint</span><br><span class="line">  UefiLib</span><br><span class="line">  ...</span><br><span class="line">[Guids]</span><br><span class="line">...</span><br><span class="line">[Protocols]</span><br><span class="line">...</span><br><span class="line">[Pcd]</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>在这里我省略了一些暂时不需要的内容，方便我们编写工程文件。<br />
工程文件分为很多个块，每个块以&quot;[块名]“开头，”[块名]&quot;必须单独占一行。有些块是所有工程必须的块，这些块包括[Defines]，[Sources]，[Packages]，[LibraryClasses]。其他模块并不是每个模块一定要编写的块，仅在用到的时候需要编写，详细内容见下表：</p>
<table>
<thead>
<tr>
<th style="text-align:left">块名称</th>
<th style="text-align:left">描述</th>
<th style="text-align:center">是否为必须块</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">[Defines]</td>
<td style="text-align:left">定义本模块的属性变量及其他变量，这些变量可在工程文件其他块中引用</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:left">[Sources]</td>
<td style="text-align:left">列出本模块的所有源文件及资源文件</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:left">[Packages]</td>
<td style="text-align:left">列出本模块引用到的所有包的包声明文件。可能引用到的资源包包括头文件，GUID，Protocol等，这些资源都声明在包的包声明文件<code>.dsc</code>中</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:left">[LibraryClasses]</td>
<td style="text-align:left">列出本模块要链接的库模块</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:left">[Protocols]</td>
<td style="text-align:left">列出本模块用到的Protocol</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:left">[Guids]</td>
<td style="text-align:left">列出本模块用到的GUID</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:left">[BuildOptions]</td>
<td style="text-align:left">指定编译和链接选项</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:left">[Pcd]</td>
<td style="text-align:left">Pcd全称为平台配置数据库（Platform Configuration Database）。[Pcd]用于列出本模块用到的Pcd变量，这些Pcd变量可被整个UEFI系统访问</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:left">[PcdEx]</td>
<td style="text-align:left">用于列出本模块用到的Pcd变量，这些Pcd变量可被整个UEFI系统访问</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:left">[FixedPcd]</td>
<td style="text-align:left">用于列出本模块用到的Pcd编译期常量</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:left">[FeaturePcd]</td>
<td style="text-align:left">用于列出本模块用到的Pcd常量</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:left">[PatchPcd]</td>
<td style="text-align:left">列出的Pcd变量仅本模块可用</td>
<td style="text-align:center">否</td>
</tr>
</tbody>
</table>
<p>下面我们编写的简单标准应用工程文件，并分别说明必须块和几个常用块的用法。</p>
<h3 id="defines块"><a class="markdownIt-Anchor" href="#defines块"></a> [Defines]块</h3>
<p>定义本模块的属性变量及其他变量，块内定义的变量变量可被其他块引用。<br />
完整的标准应用工程模块工程文件的[Defines]块如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Defines]</span><br><span class="line">  INF_VERSION                    &#x3D; 0x00010005</span><br><span class="line">  BASE_NAME                      &#x3D; Test</span><br><span class="line">  FILE_GUID                      &#x3D; fcdb21ed-9652-4967-a565-4e3c573c9808</span><br><span class="line">  MODULE_TYPE                    &#x3D; UEFI_APPLICATION</span><br><span class="line">  VERSION_STRING                 &#x3D; 1.0</span><br><span class="line">  ENTRY_POINT                    &#x3D; UefiMain</span><br></pre></td></tr></table></figure>
<p>解释如下：</p>
<ul>
<li><strong>INF_VERSION</strong>：INF标准版本号。EDK2的build会检查INF_VERSION的值并根据这个值解释<code>.inf</code>文件。通常设置为<code>0x00010006</code>或<code>0x00010005</code>即可。</li>
<li><strong>BASE_NAME</strong>：模块名字符串，不能包含空格。它通常也是输出文件的名字。这里我们设定为Test。</li>
<li><strong>FILE_GUID</strong>：每个工程文件必须有一个 8-4-4-4-12格式的GUID用于生成固件。这里我们需要使用<a href="https://www.guidgen.com/" target="_blank" rel="noopener">https://www.guidgen.com/</a>生成一个新的GUID（自己编写程序生成的GUID很可能出现安全性问题，在这里不作赘述）。</li>
<li><strong>MODULE_TYPE</strong>：定义模块的模块类型，对于标准应用模块，设为UEFI_APPLICATION。</li>
<li><strong>ENTRY_POINT</strong>：定义模块的入口函数，根据在源文件中的入口函数填写。一般是UefiMain。上文中我们提到的入口函数的函数名指定就是在此处设置的。</li>
</ul>
<h3 id="sources块"><a class="markdownIt-Anchor" href="#sources块"></a> [Sources]块</h3>
<p>用于列出模块的所有源文件和资源文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Sources]</span><br><span class="line">  Test.c</span><br></pre></td></tr></table></figure>
<p>我们可以在使用Sources.$(Arch)，其中$(Arch)是表示本块的体系结构，可以是IA32, X64, IPF, EBC, ARM中一个。这个的作用是不同的体系结构可能包含的源文件或资源文件不同，如果都写进[Sources]可能有问题，但是可以列出对应的[Sources.$(Arch)]，然后根据编译时标识设置，[Sources]都会被编译，[Sources.$(Arch)]中和标识相符的才会被编译。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Sources]</span><br><span class="line">Common.c</span><br><span class="line">[Sources.IA32]</span><br><span class="line">Cpu32</span><br><span class="line">[Sources.X64]</span><br><span class="line">Cpu64</span><br></pre></td></tr></table></figure>
<p>在这里我们不需要设置这么多选项。</p>
<h3 id="packages块"><a class="markdownIt-Anchor" href="#packages块"></a> [Packages]块</h3>
<p>列出本模块引用到的所有包的声明(.dec)文件。<br />
[Packages]块内每一行列出一个文件，文件使用相对于EDK2根目录的路径。若[Sources]列出了源文件，则[Packages]块必须列出<code>MdePkg/MdePkg.dec</code>，并将其放在本块首行。</p>
<p>在我们的例子中，我们仅仅引用了<code>Uefi.h</code>，因此我们只需要列出<code>MdePkg/MdePkg.dec</code>即可，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Packages]</span><br><span class="line">  MdePkg&#x2F;MdePkg.dec</span><br></pre></td></tr></table></figure>
<h3 id="libraryclasses块"><a class="markdownIt-Anchor" href="#libraryclasses块"></a> [LibraryClasses]块</h3>
<p>列出本模块要连接的库模块。<br />
块内每一行声明一个要连接的库(库的定义在.dsc文件中)。应用程序工程模块必须连接UefiApplicationEntryPoint库，驱动模块必须连接UefiDriverEntryPoint库。示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[LibraryClasses]</span><br><span class="line">  UefiApplicationEntryPoint</span><br></pre></td></tr></table></figure>
<h3 id="protocol块"><a class="markdownIt-Anchor" href="#protocol块"></a> [Protocol]块</h3>
<p>列出的模块中使用的Protocol，实际上是Protocol对应的GUID，如果未使用则为空。</p>
<h3 id="buildoptions块"><a class="markdownIt-Anchor" href="#buildoptions块"></a> [BuildOptions]块</h3>
<p>语法：<br />
[BuildOptions]<br />
[编译器家族]:[$(Target)][TOOL_CHAIN_TAG][$(Arch)]_[CC|DLINK]_FLAGS[=|==]选项</p>
<h3 id="完整工程文件"><a class="markdownIt-Anchor" href="#完整工程文件"></a> 完整工程文件</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Defines]</span><br><span class="line">  INF_VERSION                    &#x3D; 0x00010005</span><br><span class="line">  BASE_NAME                      &#x3D; Test</span><br><span class="line">  FILE_GUID                      &#x3D; fcdb21ed-9652-4967-a565-4e3c573c9808</span><br><span class="line">  MODULE_TYPE                    &#x3D; UEFI_APPLICATION</span><br><span class="line">  VERSION_STRING                 &#x3D; 1.0</span><br><span class="line">  ENTRY_POINT                    &#x3D; UefiMain</span><br><span class="line">[Sources]</span><br><span class="line">  Test.c</span><br><span class="line">[Packages]</span><br><span class="line">  MdePkg&#x2F;MdePkg.dec</span><br><span class="line">[LibraryClasses]</span><br><span class="line">  UefiApplicationEntryPoint</span><br><span class="line">  UefiLib</span><br></pre></td></tr></table></figure>
<h2 id="dsc文件"><a class="markdownIt-Anchor" href="#dsc文件"></a> .dsc文件</h2>
<p>在上文工程文件的[LibraryClasses]块中，我们提到了<code>.dsc</code>文件。<code>.inf</code>文件用于编译包内的模块，而<code>.dsc</code>文件用于编译我们的Package，即<code>HelloUefiPkg</code>。我们依旧仿照<code>ShellPkg</code>的<code>.dsc</code>文件，来编写我们我们的包编译文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># C:\edk2\ShellPkg\ShellPkg.dsc</span><br><span class="line">[Defines]</span><br><span class="line">  PLATFORM_NAME                  &#x3D; Shell</span><br><span class="line">  PLATFORM_GUID                  &#x3D; E1DC9BF8-7013-4c99-9437-795DAA45F3BD</span><br><span class="line">  PLATFORM_VERSION               &#x3D; 1.02</span><br><span class="line">  DSC_SPECIFICATION              &#x3D; 0x00010006</span><br><span class="line">  OUTPUT_DIRECTORY               &#x3D; Build&#x2F;Shell</span><br><span class="line">  SUPPORTED_ARCHITECTURES        &#x3D; IA32|X64|EBC|ARM|AARCH64</span><br><span class="line">  BUILD_TARGETS                  &#x3D; DEBUG|RELEASE|NOOPT</span><br><span class="line">  SKUID_IDENTIFIER               &#x3D; DEFAULT</span><br><span class="line">[LibraryClasses.common]</span><br><span class="line">  UefiApplicationEntryPoint|MdePkg&#x2F;Library&#x2F;UefiApplicationEntryPoint&#x2F;UefiApplicationEntryPoint.inf</span><br><span class="line">  UefiDriverEntryPoint|MdePkg&#x2F;Library&#x2F;UefiDriverEntryPoint&#x2F;UefiDriverEntryPoint.inf</span><br><span class="line">  UefiBootServicesTableLib|MdePkg&#x2F;Library&#x2F;UefiBootServicesTableLib&#x2F;UefiBootServicesTableLib.inf</span><br><span class="line">  DevicePathLib|MdePkg&#x2F;Library&#x2F;UefiDevicePathLib&#x2F;UefiDevicePathLibOptionalDevicePathProtocol.inf</span><br><span class="line">!if $(TARGET) &#x3D;&#x3D; RELEASE</span><br><span class="line">  DebugLib|MdePkg&#x2F;Library&#x2F;BaseDebugLibNull&#x2F;BaseDebugLibNull.inf</span><br><span class="line">!else</span><br><span class="line">  DebugLib|MdePkg&#x2F;Library&#x2F;UefiDebugLibConOut&#x2F;UefiDebugLibConOut.inf</span><br><span class="line">!endif</span><br><span class="line">  DebugPrintErrorLevelLib|MdePkg&#x2F;Library&#x2F;BaseDebugPrintErrorLevelLib&#x2F;BaseDebugPrintErrorLevelLib.inf</span><br><span class="line">  PcdLib|MdePkg&#x2F;Library&#x2F;BasePcdLibNull&#x2F;BasePcdLibNull.inf</span><br><span class="line">  MemoryAllocationLib|MdePkg&#x2F;Library&#x2F;UefiMemoryAllocationLib&#x2F;UefiMemoryAllocationLib.inf</span><br><span class="line">  UefiLib|MdePkg&#x2F;Library&#x2F;UefiLib&#x2F;UefiLib.inf</span><br><span class="line">  BaseLib|MdePkg&#x2F;Library&#x2F;BaseLib&#x2F;BaseLib.inf</span><br><span class="line">  BaseMemoryLib|MdePkg&#x2F;Library&#x2F;BaseMemoryLib&#x2F;BaseMemoryLib.inf</span><br><span class="line">  PrintLib|MdePkg&#x2F;Library&#x2F;BasePrintLib&#x2F;BasePrintLib.inf</span><br><span class="line">  FileHandleLib|MdePkg&#x2F;Library&#x2F;UefiFileHandleLib&#x2F;UefiFileHandleLib.inf</span><br><span class="line">  SortLib|MdeModulePkg&#x2F;Library&#x2F;UefiSortLib&#x2F;UefiSortLib.inf</span><br><span class="line">  UefiRuntimeServicesTableLib|MdePkg&#x2F;Library&#x2F;UefiRuntimeServicesTableLib&#x2F;UefiRuntimeServicesTableLib.inf</span><br><span class="line">  UefiHiiServicesLib|MdeModulePkg&#x2F;Library&#x2F;UefiHiiServicesLib&#x2F;UefiHiiServicesLib.inf</span><br><span class="line">  HiiLib|MdeModulePkg&#x2F;Library&#x2F;UefiHiiLib&#x2F;UefiHiiLib.inf</span><br><span class="line">  ...</span><br><span class="line">[LibraryClasses.ARM,LibraryClasses.AARCH64]</span><br><span class="line">  ...</span><br><span class="line">[PcdsFixedAtBuild]</span><br><span class="line">  ...</span><br><span class="line">[Components]</span><br><span class="line">  ShellPkg&#x2F;Library&#x2F;UefiShellLib&#x2F;UefiShellLib.inf</span><br><span class="line">  ...</span><br><span class="line">[BuildOptions]</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<p><code>.dsc</code>文件也是包括必需部分：[Defines],[LibraryClasses],[Components]和可选部分[PCD],[BuildOptions]等。我们依照工程文件的办法，逐项说明包编译文件的块。</p>
<h3 id="defines块-2"><a class="markdownIt-Anchor" href="#defines块-2"></a> [Defines]块</h3>
<p>[Defines]用于设置build相关的全局变量，这些变量可以被<code>.dsc</code>文件的其它模块引用。[Defines]必须是<code>.dsc</code>文件的第一个部分，格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Defines]</span><br><span class="line">  宏变量名 &#x3D; 值</span><br><span class="line">  DEFINE 宏变量名 &#x3D; 值</span><br><span class="line">  EDK_GLOBAL 宏变量名 &#x3D; 值</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>宏变量名</th>
<th>值类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>PLATFORM_NAME</td>
<td>标识符</td>
<td>建议使用包名，即HelloUefi</td>
</tr>
<tr>
<td>PLATFORM_GUID</td>
<td>GUID</td>
<td>使用随机的GUID，保证独一无二性</td>
</tr>
<tr>
<td>PLATFORM_VERSION</td>
<td>数值</td>
<td>定义版本号，这里定义为0.01</td>
</tr>
<tr>
<td>DSC_SPECIFICATION</td>
<td>数值</td>
<td>默认0x00010006，兼容UEFI spec2.8，无需改动</td>
</tr>
<tr>
<td>OUTPUT_DIRECTORY</td>
<td>路径</td>
<td>生成目标文件路径，改为Build/HelloUefi</td>
</tr>
<tr>
<td>SUPPORTED_ARCHITECTURES</td>
<td>列表</td>
<td>所支持的平台体系结构，IA32|X64|EBC|ARM|AARCH64，无需改动</td>
</tr>
<tr>
<td>BUILD_TARGETS</td>
<td>列表</td>
<td>所支持的编译目标，DEBUG|RELEASE|NOOPT，无需改动</td>
</tr>
<tr>
<td>SKUID_IDENTIFIER</td>
<td>标识符</td>
<td>默认DEFAULT，无需改动</td>
</tr>
</tbody>
</table>
<h3 id="libraryclasses块-2"><a class="markdownIt-Anchor" href="#libraryclasses块-2"></a> [LibraryClasses]块</h3>
<p>[LibraryClasses]块中定义了库的名字以及库的<code>.inf</code>文件，这些库可以被[Compenents]块内的模块引用。<br />
在<code>.inf</code>文件中的[LibraryClasses]块中列出的引用库必须在这里说明。具体的格式可以仿照ShellPkg的<code>.dsc</code>文件格式，在这里不详细说明了。</p>
<h3 id="compenets块"><a class="markdownIt-Anchor" href="#compenets块"></a> [Compenets]块</h3>
<p>我们还需要注意的块就是[Compenets]块了，这里要说明我们包内定义的模块，即Test模块，下面是完整的<code>.dsc</code>文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Defines]</span><br><span class="line">  PLATFORM_NAME                  &#x3D; HelloUefi</span><br><span class="line">  PLATFORM_GUID                  &#x3D; 8e853b59-ab54-4e98-a431-dd7eef179050</span><br><span class="line">  PLATFORM_VERSION               &#x3D; 0.01</span><br><span class="line">  DSC_SPECIFICATION              &#x3D; 0x00010006</span><br><span class="line">  OUTPUT_DIRECTORY               &#x3D; Build&#x2F;HelloUefi</span><br><span class="line">  SUPPORTED_ARCHITECTURES        &#x3D; IA32|X64|EBC|ARM|AARCH64</span><br><span class="line">  BUILD_TARGETS                  &#x3D; DEBUG|RELEASE|NOOPT</span><br><span class="line">  SKUID_IDENTIFIER               &#x3D; DEFAULT</span><br><span class="line"></span><br><span class="line">[LibraryClasses.common]</span><br><span class="line">  UefiApplicationEntryPoint|MdePkg&#x2F;Library&#x2F;UefiApplicationEntryPoint&#x2F;UefiApplicationEntryPoint.inf</span><br><span class="line">  UefiDriverEntryPoint|MdePkg&#x2F;Library&#x2F;UefiDriverEntryPoint&#x2F;UefiDriverEntryPoint.inf</span><br><span class="line">  UefiBootServicesTableLib|MdePkg&#x2F;Library&#x2F;UefiBootServicesTableLib&#x2F;UefiBootServicesTableLib.inf</span><br><span class="line">  DevicePathLib|MdePkg&#x2F;Library&#x2F;UefiDevicePathLib&#x2F;UefiDevicePathLibOptionalDevicePathProtocol.inf</span><br><span class="line">  UefiDevicePathLibDevicePathProtocol|MdePkg&#x2F;Library&#x2F;UefiDevicePathLibDevicePathProtocol&#x2F;UefiDevicePathLibDevicePathProtocol.inf</span><br><span class="line">!if $(TARGET) &#x3D;&#x3D; RELEASE</span><br><span class="line">  DebugLib|MdePkg&#x2F;Library&#x2F;BaseDebugLibNull&#x2F;BaseDebugLibNull.inf</span><br><span class="line">!else</span><br><span class="line">  DebugLib|MdePkg&#x2F;Library&#x2F;UefiDebugLibConOut&#x2F;UefiDebugLibConOut.inf</span><br><span class="line">!endif</span><br><span class="line">  DebugPrintErrorLevelLib|MdePkg&#x2F;Library&#x2F;BaseDebugPrintErrorLevelLib&#x2F;BaseDebugPrintErrorLevelLib.inf</span><br><span class="line">  PcdLib|MdePkg&#x2F;Library&#x2F;BasePcdLibNull&#x2F;BasePcdLibNull.inf</span><br><span class="line">  MemoryAllocationLib|MdePkg&#x2F;Library&#x2F;UefiMemoryAllocationLib&#x2F;UefiMemoryAllocationLib.inf</span><br><span class="line">  UefiLib|MdePkg&#x2F;Library&#x2F;UefiLib&#x2F;UefiLib.inf</span><br><span class="line">  BaseLib|MdePkg&#x2F;Library&#x2F;BaseLib&#x2F;BaseLib.inf</span><br><span class="line">  BaseMemoryLib|MdePkg&#x2F;Library&#x2F;BaseMemoryLib&#x2F;BaseMemoryLib.inf</span><br><span class="line">  PrintLib|MdePkg&#x2F;Library&#x2F;BasePrintLib&#x2F;BasePrintLib.inf</span><br><span class="line">  FileHandleLib|MdePkg&#x2F;Library&#x2F;UefiFileHandleLib&#x2F;UefiFileHandleLib.inf</span><br><span class="line">  SortLib|MdeModulePkg&#x2F;Library&#x2F;UefiSortLib&#x2F;UefiSortLib.inf</span><br><span class="line">  UefiRuntimeServicesTableLib|MdePkg&#x2F;Library&#x2F;UefiRuntimeServicesTableLib&#x2F;UefiRuntimeServicesTableLib.inf</span><br><span class="line">  UefiRuntimeLib|MdePkg&#x2F;Library&#x2F;UefiRuntimeLib&#x2F;UefiRuntimeLib.inf</span><br><span class="line">  UefiHiiServicesLib|MdeModulePkg&#x2F;Library&#x2F;UefiHiiServicesLib&#x2F;UefiHiiServicesLib.inf</span><br><span class="line">  HiiLib|MdeModulePkg&#x2F;Library&#x2F;UefiHiiLib&#x2F;UefiHiiLib.inf</span><br><span class="line">  </span><br><span class="line">[LibraryClasses.ARM,LibraryClasses.AARCH64]</span><br><span class="line"></span><br><span class="line">[PcdsFixedAtBuild]</span><br><span class="line"></span><br><span class="line">[Components]</span><br><span class="line">  HelloUefiPkg&#x2F;Test&#x2F;Test.inf</span><br><span class="line"></span><br><span class="line">[BuildOptions]</span><br></pre></td></tr></table></figure>
<h1 id="编译并运行"><a class="markdownIt-Anchor" href="#编译并运行"></a> 编译并运行</h1>
<p>在处理完以上的文件后，能够得到这样的文件目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\edk2\HelloUefiPkg</span><br><span class="line">├── HelloUefiPkg.dsc</span><br><span class="line">└── Test</span><br><span class="line">   ├── Test.c</span><br><span class="line">   └── Test.inf</span><br></pre></td></tr></table></figure>
<p>这里省略了VS产生的工程文件。</p>
<p>我们通过上一节中提到的编译方法进行编译：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">build -p HelloUefiPkg/HelloUefiPkg.dsc</span><br></pre></td></tr></table></figure>
<p>随后打开<code>C:\edk2\Build\HelloUefi\RELEASE_VS2019\X64</code>就能够找到<code>Test.efi</code>文件，将文件放入上一节提到的<code>hda-contents</code>文件夹内，再运行OVMF虚拟机。</p>
<p>当进入<code>fs0:</code>后，运行<code>Test.efi</code>，就能够看到屏幕上打印的结果了。</p>
<p><img data-src="res.png" alt="运行结果" /></p>
<p>至此，我们的Hello Uefi程序完成。</p>
]]></content>
      <categories>
        <category>UEFI</category>
      </categories>
      <tags>
        <tag>UEFI</tag>
      </tags>
  </entry>
  <entry>
    <title>UEFI原理与实践笔记_开发环境搭建</title>
    <url>/UEFI/UEFI%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>UEFI原理与实践笔记（一）-开发环境搭建<br />
记录一下在Windows环境下搭建UEFI开发环境的过程</p>
</blockquote>
<a id="more"></a>
<h1 id="配置windows开发环境"><a class="markdownIt-Anchor" href="#配置windows开发环境"></a> 配置Windows开发环境</h1>
<h2 id="下载安装所需工具"><a class="markdownIt-Anchor" href="#下载安装所需工具"></a> 下载安装所需工具</h2>
<p>我们首先需要安装EDK2所依赖的开发工具及本身。</p>
<h3 id="vs2019"><a class="markdownIt-Anchor" href="#vs2019"></a> vs2019</h3>
<p>安装 Visual Studio 2019 作为主要的开发工具<br />
下载地址：<a href="https://visualstudio.microsoft.com/zh-hans/free-developer-offers/" target="_blank" rel="noopener">https://visualstudio.microsoft.com/zh-hans/free-developer-offers/</a><br />
我们勾选如下的选项即可：<br />
<img data-src="https://dev.tencent.com/u/jygzyc/p/blog-back-up/git/raw/master/_posts/UEFI%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/vs2019.png" alt="安装" /><br />
选用vs2019的原因是当前EDK2推荐的版本就是vs2019，比较稳定。<br />
装好之后，我们可以将<code>Developer Command Prompt for VS 2019</code>这个快捷方式单独提出来，之后会频繁用到。</p>
<h3 id="edk2"><a class="markdownIt-Anchor" href="#edk2"></a> EDK2</h3>
<p>Github地址：<a href="https://github.com/tianocore/edk2" target="_blank" rel="noopener">https://github.com/tianocore/edk2</a><br />
最好下载最新的release版本，将EDK2目录解压后放在<code>C:</code>目录下。</p>
<h3 id="python-38"><a class="markdownIt-Anchor" href="#python-38"></a> Python 3.8</h3>
<p>下载地址：<a href="https://www.python.org/ftp/python/3.8.1/python-3.8.1.exe" target="_blank" rel="noopener">https://www.python.org/ftp/python/3.8.1/python-3.8.1.exe</a><br />
安装时最好勾选添加到环境变量中，不然之后还得自己配。</p>
<h3 id="nasm"><a class="markdownIt-Anchor" href="#nasm"></a> NASM</h3>
<p>下载地址：<a href="https://www.nasm.us/" target="_blank" rel="noopener">https://www.nasm.us/</a><br />
同样，将NASM安装到<code>C:</code>目录下，并将目录添加到系统环境变量Path中。</p>
<h3 id="iasl"><a class="markdownIt-Anchor" href="#iasl"></a> iasl</h3>
<p>下载地址：<a href="https://acpica.org/downloads/binary-tools" target="_blank" rel="noopener">https://acpica.org/downloads/binary-tools</a><br />
将iasl安装到<code>C:</code>目录下，并将目录添加到系统环境变量Path中。</p>
<h2 id="配置edk2开发环境"><a class="markdownIt-Anchor" href="#配置edk2开发环境"></a> 配置EDK2开发环境</h2>
<h3 id="初始化环境"><a class="markdownIt-Anchor" href="#初始化环境"></a> 初始化环境</h3>
<p>进入EDK2目录，运行<code>edksetup.bat</code>，此步骤用于建立Conf目录下的<code>target.txt</code>，<code>tools_def.txt</code>等文件。</p>
<h3 id="编辑编译相关文件"><a class="markdownIt-Anchor" href="#编辑编译相关文件"></a> 编辑编译相关文件</h3>
<p>编辑<code>Conf/target.txt</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">ACTIVE_PLATFORM       &#x3D; MdePkg&#x2F;MdePkg.dsc</span><br><span class="line">...</span><br><span class="line">TARGET                &#x3D; RELEASE</span><br><span class="line">...</span><br><span class="line">TARGET_ARCH           &#x3D; X64</span><br><span class="line">...</span><br><span class="line">TOOL_CHAIN_TAG        &#x3D; VS2019</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="编译uefi基础依赖包"><a class="markdownIt-Anchor" href="#编译uefi基础依赖包"></a> 编译UEFI基础依赖包</h2>
<p>首先我们需要设置命令行能够包含vs2019的工具集，我们打开之前强调的<code>Developer Command Prompt for VS 2019</code>，从该命令行窗口进入EDK2目录，即<code>cd C:\edk2</code>。</p>
<p>在每一次编译项目前，我们还要保证EDK2环境变量被设置，即运行<code>edksetup.bat</code>。</p>
<p>当我们设置完环境后，就可以执行<code>build</code>命令了，这个命令能够分析工程文件，根据你的设置自动执行相应编译和连接命令。在上面我们修改了<code>target.txt</code>文件，这个文件相当于编译配置文件。</p>
<p>在这里解释一下上面修改内容的含义：</p>
<ul>
<li>MdePkg是UEFI环境下的基础库，地位差不多和C语言中的<code>stdio.h</code>类似，编译这个库后自己写的工程模块才能进行依赖运行。</li>
<li>我们在这里编译的程序架构为<code>X64</code>，所以最后编译版本为<code>Release</code>，若为32位架构则可以选择编译版本为<code>DEBUG</code>，在这里不作讨论。</li>
<li>工具链选择为vs2019</li>
</ul>
<p><code>build</code>命令执行后，若结果为<code>Done</code>，则说明环境配置成功。</p>
<h2 id="编译cryptopkg"><a class="markdownIt-Anchor" href="#编译cryptopkg"></a> 编译CryptoPkg</h2>
<h3 id="补全cryptopkg"><a class="markdownIt-Anchor" href="#补全cryptopkg"></a> 补全CryptoPkg</h3>
<p>在进行下个步骤之前，我们需要先编译CryptoPkg，我们打开<code>edk2/CryptoPkg/Library/OpensslLib/openssl</code>，发现是一个空的文件夹，我们需要下载OpenSSL的对应版本，先将CryptoPkg补全。</p>
<p>我们去<a href="https://github.com/tianocore/edk2/releases" target="_blank" rel="noopener">EDK2 release</a>找到自己下载的版本，在这里我们能找到对应所需的OpenSSL版本，我的EDK2版本是<code>edk2-stable201911</code>，对应的OpenSSL版本是<code>1.1.1d</code>。到OpenSSL官方下载：<a href="https://github.com/openssl/openssl/releases" target="_blank" rel="noopener">https://github.com/openssl/openssl/releases</a>，解压并放到指定文件夹中。</p>
<h3 id="编译"><a class="markdownIt-Anchor" href="#编译"></a> 编译</h3>
<p>同上，编辑<code>target.txt</code>文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">ACTIVE_PLATFORM       &#x3D; CryptoPkg&#x2F;CryptoPkg.dsc</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><code>build</code>命令执行后，若结果为<code>Done</code>，则说明编译成功。</p>
<h1 id="安装并编译uefi模拟器"><a class="markdownIt-Anchor" href="#安装并编译uefi模拟器"></a> 安装并编译UEFI模拟器</h1>
<h2 id="安装qemu虚拟机"><a class="markdownIt-Anchor" href="#安装qemu虚拟机"></a> 安装QEMU虚拟机</h2>
<p>下载地址：<a href="https://www.qemu.org/download/#windows" target="_blank" rel="noopener">https://www.qemu.org/download/#windows</a></p>
<h2 id="编译ovmf模拟器"><a class="markdownIt-Anchor" href="#编译ovmf模拟器"></a> 编译OVMF模拟器</h2>
<p>引用一下官方对OVMF的介绍：</p>
<blockquote>
<p>OVMF is an EDK II based project to enable UEFI support for Virtual Machines. OVMF contains sample UEFI firmware for QEMU and KVM.</p>
</blockquote>
<p>简单来说，就是OVMF能够为虚拟机提供UEFI支持，能够为QEMU虚拟机提供UEFI固件样本。</p>
<p>在之前编译<code>MdePkg</code>时，我们需要修改<code>target.txt</code>文件，由于每次编译都得修改<code>target.txt</code>中的<code>ACTIVE_PLATFORM</code>选项过于麻烦，我们直接给<code>build</code>命令附加参数：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">build -a X64 -p OvmfPkg/OvmfPkg.dsc</span><br></pre></td></tr></table></figure>
<p><code>-p</code>选项为通过指定<code>.dsc</code>文件指定要编译的Package，这个选项会取代<code>target.txt</code>中的<code>ACTIVE_PLATFORM</code>选项；<code>-a</code>选项选择目标平台，这个选项会取代<code>target.txt</code>中的<code>TARGET_ARCH</code>选项。</p>
<h2 id="建立目录"><a class="markdownIt-Anchor" href="#建立目录"></a> 建立目录</h2>
<p>若编译成功，我们能够在<code>edk2/Build</code>目录下见到我们先前编译的所有文件，<br />
找到<code>edk2/Build/OvmfX64/RELEASE_VS2019/FV/OVMF.fd</code>文件，这就是我们需要的UEFI样本。</p>
<p>在任意地方新建一个目录，目录结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ovmf  名字可以自己起</span><br><span class="line">|</span><br><span class="line">│   OVMF.fd</span><br><span class="line">│   run.bat</span><br><span class="line">└───hda-contents</span><br><span class="line">│   │   这里将存放之后编译好的.efi文件</span><br><span class="line">|   |   文件夹的名称要和下面的 run.bat 脚本中的文件夹名称保持一致</span><br></pre></td></tr></table></figure>
<p>其中，<code>OVMF.fd</code>就是编译好的文件，<code>run.bat</code>的内容如下：</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">qemu-system-x86_64 -drive file=OVMF.fd,<span class="keyword">if</span>=pflash,<span class="built_in">format</span>=raw,unit=<span class="number">0</span>,readonly=on -drive file=fat:rw:.\hda-contents\,media=disk,<span class="keyword">if</span>=virtio,<span class="built_in">format</span>=raw -m <span class="number">512</span> -machine q35,smm=on -nodefaults -vga std -global driver=cfi.pflash01,property=secure,value=on -global ICH9-LPC.disable_s3=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>此时我们执行<code>run.bat</code>，可以看到如下的界面：</p>
<p><img data-src="https://dev.tencent.com/u/jygzyc/p/blog-back-up/git/raw/master/_posts/UEFI%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/ovmf.png" alt="UEFI模拟器启动界面" /></p>
<p>在<code>Shell &gt;</code>后输入<code>fs0:</code>即可进入到存放文件的位置，因为目前还没有任何工程，所以没有<code>.efi</code>可执行文件。</p>
<h1 id="参考文献"><a class="markdownIt-Anchor" href="#参考文献"></a> 参考文献</h1>
<p>UEFI原理与编程/戴正华著 2015.1</p>
]]></content>
      <categories>
        <category>UEFI</category>
      </categories>
      <tags>
        <tag>UEFI</tag>
      </tags>
  </entry>
  <entry>
    <title>比特币密钥和地址</title>
    <url>/bitcoin/bitcoin-address/</url>
    <content><![CDATA[<blockquote>
<p>记录一下比特币密钥和地址的相关内容。</p>
</blockquote>
<a id="more"></a>
<h1 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>
<p>比特币的所有权是通过数字密钥、比特币地址和数字签名来确定的。数字密钥实际上并不存储在网络中，而是由用户生成之后，存储在一个叫做钱包的文件或简单的数据库中。存储在用户钱包中的数字密钥完全独立于比特币协议，可由用户的钱包软件生成并管理，而无需参照区块链或访问网络。密钥实现了比特币的许多有趣特性，包括去中心化信任和控制、所有权认证和基于密码学证明的安全模型。<br />
大多数比特币交易都需要一个有效的签名才会被存储在区块链。只有有效的密钥才能产生有效的数字签名，因此拥有~密钥副本就拥有了对该帐户的比特币的控制权。用于支出资金的数字签名也称为见证（witness），密码术中使用的术语。 比特币交易中的见证数据证明了所用资金的真正归谁所有。</p>
<h2 id="公钥加密和加密货币"><a class="markdownIt-Anchor" href="#公钥加密和加密货币"></a> 公钥加密和加密货币</h2>
<p>在比特币系统中，我们用公钥加密创建一个密钥对，用于控制比特币的获取。密钥对包括一个私钥，和由其衍生出的唯 一的公钥。公钥用于接收比特币，而私钥用于比特币支付时的交易签名。</p>
<p>支付比特币时，比特币的当前所有者需要在交易中提交其公钥和签名（每次交易的签名都不同，但均从同一个私钥生成）。比特币网络中的所有人都可以通过所提交的公钥和签名进行验证，并确认该交易是否有效，即确认支付者在该时刻对所交易的比特币拥有所有权。</p>
<h2 id="私钥和公钥"><a class="markdownIt-Anchor" href="#私钥和公钥"></a> 私钥和公钥</h2>
<p>私钥、公钥和比特币地址之间的关系如下图所示。</p>
<p><img data-src="4-1.png" alt="私钥，公钥和比特币地址" /></p>
<h2 id="私钥"><a class="markdownIt-Anchor" href="#私钥"></a> 私钥</h2>
<p>生成密钥的第一步也是最重要的一步，是要找到足够安全的熵源，即随机性来源。<br />
更准确地说，私钥可以是1和n-1之间的任何数字，其中n是一个常数（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>1.158</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup><mn>7</mn></mrow><annotation encoding="application/x-tex">n=1.158 * 10^77</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">1</span><span class="mord">5</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mord">7</span></span></span></span>，略小于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>2</mn></msup><mn>56</mn></mrow><annotation encoding="application/x-tex">2^256</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord">5</span><span class="mord">6</span></span></span></span>），并被定义为由比特币所使用的椭圆曲线的阶。</p>
<h2 id="公钥"><a class="markdownIt-Anchor" href="#公钥"></a> 公钥</h2>
<p>通过椭圆曲线乘法可以从私钥计算得到公钥，这是不可逆转的过程：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo>=</mo><mi>k</mi><mo>∗</mo><mi>G</mi></mrow><annotation encoding="application/x-tex">K = k * G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>是私钥，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span> 是被称为生成点的常数点，而 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span> 是所得公钥。其反向运算，被称为“寻找离散对数”——已知公钥 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span> 来求出私钥 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> ——是非常困难的，就像去试验所有可能的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 值，即暴力搜索。</p>
<h2 id="椭圆曲线密码学"><a class="markdownIt-Anchor" href="#椭圆曲线密码学"></a> 椭圆曲线密码学</h2>
<p>比特币使用了secp256k1标准所定义的一种特殊的椭圆曲线和一系列数学常数。该标准由美国国家标准与技术研究院 （NIST）设立。secp256k1曲线由下述函数定义，该函数可产生一条椭圆曲线：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><mo stretchy="false">(</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mn>7</mn><mo stretchy="false">)</mo><mi>o</mi><mi>v</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo><msub><mi mathvariant="double-struck">F</mi><mi>P</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y^2 = (x^3+7)over( \mathbb{F}_P) 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">7</span><span class="mclose">)</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathbb">F</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p>或</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>y</mi><mn>2</mn></msup><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>P</mi><mo>=</mo><mo stretchy="false">(</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mn>7</mn><mo stretchy="false">)</mo><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>P</mi></mrow><annotation encoding="application/x-tex">y^2 \mod P= (x^3+7)\mod P
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">7</span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span></span></p>
<p>上述 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>P</mi></mrow><annotation encoding="application/x-tex">\mod P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>（素数P取模）表明该曲线是在素数阶P的有限域内，也写作 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="double-struck">F</mi><mi>P</mi></msub></mrow><annotation encoding="application/x-tex">\mathbb{F}_P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83889em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">F</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>=</mo><msup><mn>2</mn><mn>256</mn></msup><mo>−</mo><msup><mn>2</mn><mn>32</mn></msup><mo>−</mo><msup><mn>2</mn><mn>9</mn></msup><mo>−</mo><msup><mn>2</mn><mn>8</mn></msup><mo>−</mo><msup><mn>2</mn><mn>7</mn></msup><mo>−</mo><msup><mn>2</mn><mn>6</mn></msup><mo>−</mo><msup><mn>2</mn><mn>4</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">P = 2^{256}-2^{32}-2^9-2^8-2^7-2^6-2^4-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">5</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>， 这是个非常大的素数。作为一个例子，下图显示了在一个小了很多的素数阶17的有限域内的椭圆曲线，其形式为网格上的一系列散点。而secP256k1的比特币椭圆曲线可以被想象成一个极大的网格上一系列更为复杂的散点。</p>
<p><img data-src="4-2.png" alt="椭圆曲线密码学FP上的椭圆曲线，其中P = 17" /></p>
<p>在椭圆曲线的数学原理中，有一个点被称为“无穷远点”，这大致对应于0在加法中的作用。计算机中，它有时表示为X = Y = 0（虽然这不满足椭圆曲线方程，但可作为特殊情况进行检验）。</p>
<p>还有一个“+”运算符，被称为“加法”，就像小学数学中的实数相加。给定椭圆曲线上的两个点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">P_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，则椭圆曲线上必定有第三点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>3</mn></msub><mo>=</mo><msub><mi>P</mi><mn>1</mn></msub><mo>+</mo><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">P_3 = P_1 + P_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。 几何图形中，该第三点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">P_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>可以在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">P_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>之间画一条线来确定。这条直线恰好与椭圆曲线相交于另外一个地方。此点记为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>3</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P_3= (x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 。然后，在x轴做翻折获得 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>3</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mo>−</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P_3=(x,-y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>。</p>
<p>下面是几个可以解释“穷远点”之存在需要的特殊情况。</p>
<p>若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">P_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是同一点，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">P_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>间的连线则为点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的切线。曲线上有且只有一个新的点与该切线相交。该切线的斜率可用微积分求得。即使限制曲线点为两个整数坐标也可求得斜率！</p>
<p>在某些情况下（即，如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">P_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>具有相同的x值，但不同的y值），则切线会完全垂直，在这种情况下，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">P_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = “无穷远点”。</p>
<p>若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>就是“无穷远点”，那么其和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub><mo>+</mo><msub><mi>P</mi><mn>2</mn></msub><mo>=</mo><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">P_1 + P_2= P_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。类似地，当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">P_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是无穷远点，则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub><mo>+</mo><msub><mi>P</mi><mn>2</mn></msub><mo>=</mo><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_1 + P_2= P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。这就是把无穷远点类似于0的作用。 事实证明，在这里 + 运算符遵守结合律，这意味着<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>A</mi><mo>+</mo><mi>B</mi><mo stretchy="false">)</mo><mo>+</mo><mi>C</mi><mo>=</mo><mi>A</mi><mo>+</mo><mo stretchy="false">(</mo><mi>B</mi><mo>+</mo><mi>C</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(A+B)+C = A+(B+C)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mclose">)</span></span></span></span>。这就是说我们可以直接不加括号书写 A + B + C，而不至于混淆。 因此，我们已经定义了椭圆加法，我们可以对乘法用拓展加法的标准方法进行定义。给定椭圆曲线上的点P，如果k是整数，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mi>P</mi><mo>=</mo><mi>P</mi><mo>+</mo><mi>P</mi><mo>+</mo><mi>P</mi><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>P</mi></mrow><annotation encoding="application/x-tex">kP =P+P+P+\dots+P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>（k次）。注意，在这种情况下k有时被混淆而称为“指数”。</p>
<h2 id="生成公钥"><a class="markdownIt-Anchor" href="#生成公钥"></a> 生成公钥</h2>
<p>以一个随机生成的私钥<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>为起点，我们将其与曲线上预定的生成点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span>相乘以获得曲线上的另一点，也就是相应的公钥 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span>。生成点是secp256k1标准的一部分，比特币密钥的生成点都是相同的：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo>=</mo><mi>k</mi><mo>∗</mo><mi>G</mi></mrow><annotation encoding="application/x-tex">K = k * G
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span></span></p>
<p>其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>是私钥，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span>是生成点，在该曲线上所得的点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span>是公钥。因为所有比特币用户的生成点是相同的，一个私钥<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>乘以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span>将 得到相同的公钥<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span>。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span>之间的关系是固定的，但只能单向运算，即从k得到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span>。这就是可以把比特币地址（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span>的衍生） 与任何人共享而不会泄露私钥（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>）的原因。</p>
<h1 id="比特币地址"><a class="markdownIt-Anchor" href="#比特币地址"></a> 比特币地址</h1>
<p>比特币地址可由公钥经过单向的加密哈希算法得到。哈希算法是一种单向函数，接收任意长度的输入产生指纹或哈希。加密哈希函数在比特币中被广泛使用，作为比特币地址、脚本地址以及在挖矿中的工作量证明算法。由公钥生成比特币地址时使用的算法是Secure Hash Algorithm (SHA)和the RACE Integ rity Primitives Evaluation Message Digest (RIPEMD)，具体地说是SHA256和RIPEMD160。</p>
<p>以公钥 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span> 为输入，计算其SHA256哈希值，并以此结果计算RIPEMD160 哈希值，得到一个长度为160位（20字节）的数字：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>=</mo><mi>R</mi><mi>I</mi><mi>P</mi><mi>E</mi><mi>M</mi><mi>D</mi><mn>160</mn><mo stretchy="false">(</mo><mi>S</mi><mi>H</mi><mi>A</mi><mn>256</mn><mo stretchy="false">(</mo><mi>K</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A=RIPEMD160(SHA256(K)) 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord">1</span><span class="mord">6</span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">A</span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p>公式中，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span>是公钥，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span>是生成的比特币地址。<br />
之后还要进行Base58check编码形成地址，流程图如下：<br />
<img data-src="4-3.png" alt="公钥到比特币地址" /></p>
<h2 id="base58和base58check编码"><a class="markdownIt-Anchor" href="#base58和base58check编码"></a> Base58和Base58check编码</h2>
<p>Base58是Base64编码格式的子集，同样使用大小写字母和10个数字，但舍弃了一些容易错 读和在特定字体中容易混淆的字符。具体地，Base58不含Base64中的0（数字0）、O（大写字母o）、l（小写字母 L）、I（大写字母i），以及“+”和“/”两个字符。简而言之，Base58就是由不包括0，O，l，I的大小写字母和数字组成。<br />
如下为Base58字母表：<br />
123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz<br />
Base58Check是一种常用在比特币中的Base58编码格式，为了防止打印和转录错误，增加安全性，内置的检查错误的编码。检验和是添加到正在编码的数据末端的额外4个字节。校验和是从编码的数据的哈希值中得到的，所以可以用来检测并避免转录和输入中产生的错误。编码过程如下：</p>
<p><img data-src="4-4.png" alt="Base58Check编码流程" /></p>
<p>以下为Base58Check版本前缀和编码后的结果：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Type</th>
<th style="text-align:center">Version prefix(hex)</th>
<th style="text-align:center">Base58 result prefix</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Bitcoin Address</td>
<td style="text-align:center">0x00</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">Pay-to-Script-Hash Address</td>
<td style="text-align:center">0x05</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">Bitcoin Testnet Address</td>
<td style="text-align:center">0x6F</td>
<td style="text-align:center">m or n</td>
</tr>
<tr>
<td style="text-align:center">Private Key WIF</td>
<td style="text-align:center">0x80</td>
<td style="text-align:center">5, K or L</td>
</tr>
<tr>
<td style="text-align:center">BIP38 Encrypted Private Key</td>
<td style="text-align:center">0x0142</td>
<td style="text-align:center">6P</td>
</tr>
<tr>
<td style="text-align:center">BIP32 Extended Public Key</td>
<td style="text-align:center">0x0488B21E</td>
<td style="text-align:center">xpub</td>
</tr>
</tbody>
</table>
<h2 id="密钥格式"><a class="markdownIt-Anchor" href="#密钥格式"></a> 密钥格式</h2>
<h3 id="私钥格式"><a class="markdownIt-Anchor" href="#私钥格式"></a> 私钥格式</h3>
<table>
<thead>
<tr>
<th style="text-align:center">Type</th>
<th style="text-align:center">Prefix</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Hex</td>
<td style="text-align:center">None</td>
<td style="text-align:center">64 hexadecimal digits</td>
</tr>
<tr>
<td style="text-align:center">WIF</td>
<td style="text-align:center">5</td>
<td style="text-align:center">Base58Check encoding: Base-58 with version prefix of 128 and 32-bit checksum</td>
</tr>
<tr>
<td style="text-align:center">WIF-compressed</td>
<td style="text-align:center">K or L</td>
<td style="text-align:center">As above, with added suffix 0x01 before encoding</td>
</tr>
</tbody>
</table>
<h3 id="压缩格式私钥"><a class="markdownIt-Anchor" href="#压缩格式私钥"></a> 压缩格式私钥</h3>
<p>“压缩格式私钥”是一个不当用词！私钥不是压缩的。WIF压缩格式的私钥只是用来表明他们只能被生成压缩的公钥和对应的比特币地址。相反地，“WIF压缩”编码的私钥还多出一个字节，因为这种私钥多了后缀“01”。该后缀是用来区分“非压缩格式”私钥和“压缩格式”私钥。具体格式见私钥格式一节。</p>
<h3 id="公钥格式"><a class="markdownIt-Anchor" href="#公钥格式"></a> 公钥格式</h3>
<p>公钥也可以用多种不同格式来表示，最重要的是它们分为非压缩格式或压缩格式公钥这两种形式。</p>
<p>我们从前文可知，公钥是在椭圆曲线上的一个点，由一对坐标（x，y）组成。公钥通常表示为前缀04紧接着两个256比特的数字。其中一个256比特数字是公钥的x坐标，另一个256比特数字是y坐标。前缀04表示其为非压缩格式公钥， 压缩格式公钥以02或者03开头。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &#x3D; F028892BAD7ED57D2FB57BF33081D5CFCF6F9ED3D3D7F159C2E2FFF579DC341A</span><br><span class="line">y &#x3D; 07CF33DA18BD734C600B96A72BBC4749D5141C90EC8AC328AE52DDFE2E505BDB</span><br></pre></td></tr></table></figure>
<p>公钥格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">K&#x3D;04F028892BAD7ED57D2FB57BF33081D5CFCF6F9ED3D3D7F159C2E2FFF579DC341A07CF33DA18BD734C600B96A72BBC4749D5141C90EC8AC328AE52DDFE2E505BDB</span><br></pre></td></tr></table></figure>
<h3 id="压缩格式公钥"><a class="markdownIt-Anchor" href="#压缩格式公钥"></a> 压缩格式公钥</h3>
<p>一个公钥是一个椭圆曲线上的点(x, y)。而椭圆曲线实际是一个数学方程，曲线上的点实际是该方程的一个解。因此，如果我们知道了公钥的x坐标，就可以通过解方程<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>y</mi><mn>2</mn></msup><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>p</mi><mo>=</mo><mo stretchy="false">(</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mn>7</mn><mo stretchy="false">)</mo><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">y^2 \mod p=(x^3 + 7)\mod p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">7</span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">p</span></span></span></span>得到y坐标的值。这种方案可以让我们只存储公钥的x坐标，略去y坐标，从而公钥的大小和存储空间减少了256比特。每个交易所需要的字节数减少了近一半，随着时间推移，就大大节省了很多数据传输和存储。</p>
<p>未压缩格式公钥使用04作为前缀，而压缩格式公钥是以02或03作为前缀。因为椭圆曲 线加密的公式的左边是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>y</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">y^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> ，也就是说y的解是来自于一个平方根，可能是正值也可能是负值。因此，为了区分y坐标的两种可能值，我们在生成压缩格式公钥时，如果y是偶数，则使用02作为前缀；如果y是奇数，则使用03作为前缀。这样就可以根据公钥中给定的x值，正确推导出对应的y坐标，从而将公钥解压缩为在椭圆曲线上的完整的点坐标。如下图所示：</p>
<p><img data-src="4-5.png" alt="公钥压缩" /></p>
<h1 id="python实现密钥和比特币地址"><a class="markdownIt-Anchor" href="#python实现密钥和比特币地址"></a> Python实现密钥和比特币地址</h1>
<h2 id="私钥生成"><a class="markdownIt-Anchor" href="#私钥生成"></a> 私钥生成</h2>
<blockquote>
<p>参考<a href="http://blog.hubwiz.com/2019/07/03/bitcoin-private-key/" target="_blank" rel="noopener">如何用python生成自己的比特币私钥</a></p>
</blockquote>
<ol>
<li>不能使用普通的random库生成私钥，因为随机种子是可以得到的，就可以尝试暴力破解。</li>
<li>保证生成的地址几乎不可能重复</li>
</ol>
<p>借鉴bitaddress.org生成私钥的工作原理，我们尝试实现它：</p>
<p>为了我们的目的，我们将构建一个更简单的bitaddress版本。首先，我们不会收集有关用户机器和位置的数据。其次，我们将仅通过文本输入熵，因为使用Python脚本持续接收鼠标位置非常具有挑战性（如果你想这样做，请检查PyAutoGUI）。</p>
<p>这将我们带到了我们的生成器库的正式规范。首先，它将使用加密RNG初始化一个字节数组，然后它将填充时间戳，最后它将填充用户创建的字符串。种子池填满后，库将让开发人员创建一个密钥。实际上，他们将能够创建任意数量的私钥，所有私钥都由收集的熵保护。</p>
<h3 id="初始化池"><a class="markdownIt-Anchor" href="#初始化池"></a> 初始化池</h3>
<p>这里我们从加密RNG和时间戳中放入一些字节。<code>__seed_int</code>和<code>__seed_byte</code>是两个将熵插入池数组的辅助方法。请注意，我们使用<code>secrets</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init_pool</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(self.POOL_SIZE):</span><br><span class="line">        random_byte = secrets.randbits(<span class="number">8</span>)</span><br><span class="line">        self.__seed_byte(random_byte)</span><br><span class="line">    time_int = int(time.time())</span><br><span class="line">    self.__seed_int(time_int)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__seed_int</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    self.__seed_byte(n)</span><br><span class="line">    self.__seed_byte(n &gt;&gt; <span class="number">8</span>)</span><br><span class="line">    self.__seed_byte(n &gt;&gt; <span class="number">16</span>)</span><br><span class="line">    self.__seed_byte(n &gt;&gt; <span class="number">24</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__seed_byte</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    self.pool[self.pool_pointer] ^= n &amp; <span class="number">255</span></span><br><span class="line">    self.pool_pointer += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> self.pool_pointer &gt;= self.POOL_SIZE:</span><br><span class="line">        self.pool_pointer = <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h3 id="输入种子"><a class="markdownIt-Anchor" href="#输入种子"></a> 输入种子</h3>
<p>这里我们首先放置一个时间戳，然后输入字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">seed_input</span><span class="params">(self, str_input)</span>:</span></span><br><span class="line">    time_int = int(time.time())</span><br><span class="line">    self.__seed_int(time_int)</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> str_input:</span><br><span class="line">        char_code = ord(char)</span><br><span class="line">        self.__seed_byte(char_code)</span><br></pre></td></tr></table></figure>
<h3 id="生成私钥"><a class="markdownIt-Anchor" href="#生成私钥"></a> 生成私钥</h3>
<p>其次，我们只确保我们的键在范围内（1，CURVE_ORDER）。这是所有ECDSA私钥的要求。CURVE_ORDER是secp256k1曲线的顺序，即：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141</span><br></pre></td></tr></table></figure>
<p>最后，为方便起见，我们转换为十六进制，并剥离’0x’部分。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_key</span><span class="params">(self)</span>:</span></span><br><span class="line">    big_int = self.__generate_big_int()</span><br><span class="line">    big_int = big_int % (self.CURVE_ORDER — <span class="number">1</span>) <span class="comment"># key &lt; curve order</span></span><br><span class="line">    big_int = big_int + <span class="number">1</span> <span class="comment"># key &gt; 0</span></span><br><span class="line">    key = hex(big_int)[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__generate_big_int</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.prng_state <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    seed = int.from_bytes(self.pool, byteorder=’big’, signed=<span class="literal">False</span>)</span><br><span class="line">    random.seed(seed)</span><br><span class="line">    self.prng_state = random.getstate()</span><br><span class="line">    random.setstate(self.prng_state)</span><br><span class="line">    big_int = random.getrandbits(self.KEY_BYTES * <span class="number">8</span>)</span><br><span class="line">    self.prng_state = random.getstate()</span><br><span class="line">    <span class="keyword">return</span> big_int</span><br></pre></td></tr></table></figure>
<h3 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kg = KeyGenerator()</span><br><span class="line">kg.seed_input(‘Truly random string. I rolled a dice <span class="keyword">and</span> got <span class="number">4.</span>’)</span><br><span class="line">kg.generate_key()</span><br></pre></td></tr></table></figure>
<h2 id="公钥与比特币地址"><a class="markdownIt-Anchor" href="#公钥与比特币地址"></a> 公钥与比特币地址</h2>
<blockquote>
<p>参考<a href="https://www.jianshu.com/p/800bcc2681d2" target="_blank" rel="noopener">python实现私钥，公钥，签名，验签原理</a></p>
</blockquote>
<p>椭圆方程一般方程形如：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">y^2=x^3 + ax + b 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span></span></p>
<p>比特币椭圆曲线中采用的参数如下，16进制表示，a=0，b= 7。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_a = <span class="number">0x0000000000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line">_b = <span class="number">0x0000000000000000000000000000000000000000000000000000000000000007</span></span><br></pre></td></tr></table></figure>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo>=</mo><mi>k</mi><mo>∗</mo><mi>G</mi></mrow><annotation encoding="application/x-tex">K=k*G 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span>为比特币椭圆曲线上固定已知的一点，坐标如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_Gx = <span class="number">0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798</span></span><br><span class="line">_Gy = <span class="number">0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8</span></span><br><span class="line">G_point = (_Gx, _Gy)</span><br></pre></td></tr></table></figure>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>为私钥，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span>为公钥。</p>
<p>r是一个和_p有关的参数，私钥不能大于_r</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_p = <span class="number">0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f</span></span><br><span class="line">_r = <span class="number">0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141</span></span><br></pre></td></tr></table></figure>
<h3 id="求逆元"><a class="markdownIt-Anchor" href="#求逆元"></a> 求逆元</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Mod_inv</span><span class="params">(a, n=_p)</span>:</span></span><br><span class="line">    lm, hm = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    low, high = a % n, n</span><br><span class="line">    <span class="keyword">while</span> low &gt; <span class="number">1</span>:</span><br><span class="line">        ratio = high // low</span><br><span class="line">        nm, new = hm - lm * ratio, high - low * ratio</span><br><span class="line">        lm, low, hm, high = nm, new, lm, low</span><br><span class="line">    <span class="keyword">return</span> lm % n</span><br></pre></td></tr></table></figure>
<h3 id="椭圆曲线加法"><a class="markdownIt-Anchor" href="#椭圆曲线加法"></a> 椭圆曲线加法</h3>
<p>公式如下：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>X</mi><mi>R</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><msup><mi>λ</mi><mn>2</mn></msup><mo>−</mo><msub><mi>X</mi><mi>P</mi></msub><mo>−</mo><msub><mi>X</mi><mi>Q</mi></msub><mo stretchy="false">)</mo><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>P</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>Y</mi><mi>R</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mi>λ</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mi>P</mi></msub><mo>−</mo><msub><mi>X</mi><mi>R</mi></msub><mo stretchy="false">)</mo><mo>−</mo><msub><mi>Y</mi><mi>P</mi></msub><mo stretchy="false">)</mo><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>P</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>λ</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mfrac><mrow><msub><mi>Y</mi><mi>Q</mi></msub><mo>−</mo><msub><mi>Y</mi><mi>P</mi></msub></mrow><mrow><msub><mi>X</mi><mi>Q</mi></msub><mo>−</mo><msub><mi>X</mi><mi>P</mi></msub></mrow></mfrac><mo fence="true">)</mo></mrow><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>P</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
X_R &amp;= (\lambda^2 - X_P - X_Q) \mod P \\
\\
Y_R &amp;= (\lambda(X_P - X_R)-Y_P) \mod P \\
\\
\lambda &amp;= \left( \frac{Y_Q-Y_P}{X_Q-X_P} \right) \mod P \\
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:8.746216em;vertical-align:-4.123108em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.623108em;"><span style="top:-7.2090000000000005em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.7090000000000005em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"></span></span><span style="top:-4.2090000000000005em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7090000000000005em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"></span></span><span style="top:-0.599em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord mathdefault">λ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.123108em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.623108em;"><span style="top:-7.2090000000000005em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">Q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span><span style="top:-4.2090000000000005em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span><span style="top:-0.599em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">Q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">Q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.972108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.123108em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">E_add</span><span class="params">(p, q)</span>:</span></span><br><span class="line">    lam = ((q[<span class="number">1</span>] - p[<span class="number">1</span>]) * Mod_inv(q[<span class="number">0</span>] - p[<span class="number">0</span>], _p)) % _p</span><br><span class="line">    rx = (lam * lam - p[<span class="number">0</span>] - q[<span class="number">0</span>]) % _p</span><br><span class="line">    ry = (lam * (p[<span class="number">0</span>] - rx) - p[<span class="number">1</span>]) % _p</span><br><span class="line">    <span class="keyword">return</span> rx, ry</span><br></pre></td></tr></table></figure>
<h3 id="椭圆曲线2p乘法"><a class="markdownIt-Anchor" href="#椭圆曲线2p乘法"></a> 椭圆曲线2P乘法</h3>
<p>公式如下：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>X</mi><mi>R</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><msup><mi>λ</mi><mn>2</mn></msup><mo>−</mo><mn>2</mn><msub><mi>X</mi><mi>P</mi></msub><mo stretchy="false">)</mo><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>P</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>Y</mi><mi>R</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mi>λ</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mi>P</mi></msub><mo>−</mo><msub><mi>X</mi><mi>R</mi></msub><mo stretchy="false">)</mo><mo>−</mo><msub><mi>Y</mi><mi>P</mi></msub><mo stretchy="false">)</mo><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>P</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>λ</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mfrac><mrow><mn>3</mn><msubsup><mi>X</mi><mi>P</mi><mn>2</mn></msubsup><mo>+</mo><mi>a</mi></mrow><mrow><mn>2</mn><msub><mi>Y</mi><mi>P</mi></msub></mrow></mfrac><mo fence="true">)</mo></mrow><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>P</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
X_R &amp;= ( \lambda^2 - 2X_P) \mod P\\
\\
Y_R &amp;= (\lambda(X_P - X_R)-Y_P) \mod P\\
\\
\lambda &amp;= \left( \frac{3X_P^2+a}{2Y_P} \right) \mod P\\ 
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:8.765246000000001em;vertical-align:-4.132623000000001em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.632623000000001em;"><span style="top:-7.259623000000001em;"><span class="pstrut" style="height:3.491108em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.759623000000001em;"><span class="pstrut" style="height:3.491108em;"></span><span class="mord"></span></span><span style="top:-4.259623000000001em;"><span class="pstrut" style="height:3.491108em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7596230000000013em;"><span class="pstrut" style="height:3.491108em;"></span><span class="mord"></span></span><span style="top:-0.6085149999999997em;"><span class="pstrut" style="height:3.491108em;"></span><span class="mord"><span class="mord mathdefault">λ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.132623000000001em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.632623000000001em;"><span style="top:-7.259623000000001em;"><span class="pstrut" style="height:3.491108em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span><span style="top:-4.259623000000001em;"><span class="pstrut" style="height:3.491108em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathdefault">λ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span><span style="top:-0.6085149999999997em;"><span class="pstrut" style="height:3.491108em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.424669em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.275331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.132623000000001em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">E_double</span><span class="params">(p)</span>:</span></span><br><span class="line">    lam = ((<span class="number">3</span> * p[<span class="number">0</span>] * p[<span class="number">0</span>] + _a) * Mod_inv((<span class="number">2</span> * p[<span class="number">1</span>]), _p)) % _p</span><br><span class="line">    rx = (lam * lam - <span class="number">2</span> * p[<span class="number">0</span>]) % _p</span><br><span class="line">    ry = (lam * (p[<span class="number">0</span>] - rx) - p[<span class="number">1</span>]) % _p</span><br><span class="line">    <span class="keyword">return</span> rx, ry</span><br></pre></td></tr></table></figure>
<h3 id="公钥计算"><a class="markdownIt-Anchor" href="#公钥计算"></a> 公钥计算</h3>
<p>9G等于8G+G。现有一种更快捷算法：如计算9G，我们首先将9转化为二进制是’1001’，跳过第一位，从第二位开始，先直接对g倍乘，当该位为1时再进行一次加G，经过循环，最后得到9G。<br />
定义Emultiply函数，输入为G点，和私钥(sk)，输出为公钥(kG点的坐标)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Emultiply</span><span class="params">(point, secret_key)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> secret_key == <span class="number">0</span> <span class="keyword">or</span> secret_key &gt;= _r:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">"Key Error"</span>)</span><br><span class="line">    secret_key = str(bin(secret_key))[<span class="number">2</span>:]</span><br><span class="line">    g = point</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(secret_key)):</span><br><span class="line">        g = E_double(g)</span><br><span class="line">        <span class="keyword">if</span> secret_key[i] == <span class="string">'1'</span>:</span><br><span class="line">            g = E_add(g, point)</span><br><span class="line">    <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure>
<h3 id="压缩公钥"><a class="markdownIt-Anchor" href="#压缩公钥"></a> 压缩公钥</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compressPub</span><span class="params">(point)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> point[<span class="number">1</span>] &amp; <span class="number">1</span>:</span><br><span class="line">        pub = <span class="string">'03'</span> + hex(point[<span class="number">0</span>])[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pub = <span class="string">'02'</span> + hex(point[<span class="number">0</span>])[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">return</span> pub</span><br></pre></td></tr></table></figure>
<h3 id="生成地址"><a class="markdownIt-Anchor" href="#生成地址"></a> 生成地址</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">base58</span><span class="params">(address_hex)</span>:</span></span><br><span class="line">    alphabet = <span class="string">'123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'</span></span><br><span class="line">    b58_string = <span class="string">''</span></span><br><span class="line">    leading_zeros = len(address_hex) - len(address_hex.lstrip(<span class="string">'0'</span>))</span><br><span class="line">    address_int = int(address_hex, <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">while</span> address_int &gt; <span class="number">0</span>:</span><br><span class="line">        digit = address_int % <span class="number">58</span></span><br><span class="line">        digit_char = alphabet[digit]</span><br><span class="line">        b58_string = digit_char + b58_string</span><br><span class="line">        address_int //= <span class="number">58</span></span><br><span class="line">    ones = leading_zeros // <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> one <span class="keyword">in</span> range(ones):</span><br><span class="line">        b58_string = <span class="string">'1'</span> + b58_string</span><br><span class="line">    <span class="keyword">return</span> b58_string</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sha_256</span><span class="params">(a)</span>:</span></span><br><span class="line">    a = json.dumps(a).encode()</span><br><span class="line">    a = hashlib.sha256(a).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rip_160</span><span class="params">(a)</span>:</span></span><br><span class="line">    a = json.dumps(a).encode()</span><br><span class="line">    a = hashlib.new(<span class="string">'ripemd160'</span>, a).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(sk)</span>:</span></span><br><span class="line">    pubk = Emultiply(G_point, sk)</span><br><span class="line">    sa = compressPub(pubk)</span><br><span class="line">    tmpa = sha_256(sa)</span><br><span class="line">    tmpa = rip_160(tmpa)</span><br><span class="line">    tmpa_body = <span class="string">'00'</span> + tmpa</span><br><span class="line">    tmpa = tmpa_body</span><br><span class="line">    tmpa = sha_256(tmpa)</span><br><span class="line">    prefix = sha_256(tmpa)[:<span class="number">8</span>]</span><br><span class="line">    pro_address = tmpa_body + prefix</span><br><span class="line">    <span class="keyword">return</span> pubk, base58(pro_address)</span><br></pre></td></tr></table></figure>
<h1 id="参考文献与代码下载"><a class="markdownIt-Anchor" href="#参考文献与代码下载"></a> 参考文献与代码下载</h1>
<h2 id="参考文献"><a class="markdownIt-Anchor" href="#参考文献"></a> 参考文献</h2>
<ul>
<li><a href="https://www.jianshu.com/p/800bcc2681d2" target="_blank" rel="noopener">python实现私钥，公钥，签名，验签原理</a></li>
<li><a href="http://blog.hubwiz.com/2019/07/03/bitcoin-private-key/" target="_blank" rel="noopener">如何用python生成自己的比特币私钥</a></li>
<li><a href="http://ibloodline.com/assets/master-bitcoin/ch04.html" target="_blank" rel="noopener">第四章 密钥和地址</a></li>
<li>“Mastering bitcoin: Programming the Open Blockchain” edtion 2</li>
<li><a href="https://blog.csdn.net/xiaobing1994/article/details/88060259" target="_blank" rel="noopener">用python实现简版区块链-地址</a></li>
<li><a href="https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication" target="_blank" rel="noopener">Elliptic curve point multiplication</a></li>
</ul>
<h2 id="代码下载"><a class="markdownIt-Anchor" href="#代码下载"></a> 代码下载</h2>
<p><a href="https://github.com/jygzyc/bitcoin_test" target="_blank" rel="noopener">https://github.com/jygzyc/bitcoin_test</a></p>
]]></content>
      <categories>
        <category>bitcoin</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>bitcoin</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Vector解析</title>
    <url>/program/c/c-Vector%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<blockquote>
<p>在写程序的时候看见别人用了vector，然而我还不太了解，那就学习记录一下。</p>
</blockquote>
<a id="more"></a>
<h1 id="什么是vector"><a class="markdownIt-Anchor" href="#什么是vector"></a> 什么是vector</h1>
<p>菜鸟教程里的解释是这样：</p>
<blockquote>
<p>向量（Vector）是一个封装了动态大小数组的顺序容器（Sequence Container）。跟任意其它类型容器一样，它能够存放各种类型的对象。可以简单的认为，向量是一个能够存放任意类型的动态数组。</p>
</blockquote>
<h1 id="vector的性质"><a class="markdownIt-Anchor" href="#vector的性质"></a> vector的性质</h1>
<ul>
<li>
<p>顺序存储<br />
容器内元素按顺序排列，类似数组，可通过位置访问对应元素。</p>
</li>
<li>
<p>动态数组<br />
当元素插入或删除时能够自动改变容器大小。</p>
</li>
</ul>
<h1 id="vector实例"><a class="markdownIt-Anchor" href="#vector实例"></a> vector实例</h1>
<h2 id="引入"><a class="markdownIt-Anchor" href="#引入"></a> 引入</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span>;</span><br></pre></td></tr></table></figure>
<h2 id="在容器最后增加删除元素"><a class="markdownIt-Anchor" href="#在容器最后增加删除元素"></a> 在容器最后增加/删除元素</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; obj;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">    obj.push_back(temp);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; obj[i] &lt;&lt; <span class="string">","</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">obj.pop_back();</span><br><span class="line">obj.pop_back();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;obj.<span class="built_in">size</span>(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; obj[i] &lt;&lt; <span class="string">","</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试与返回结果如下所示：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,</span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,</span><br></pre></td></tr></table></figure>
<h2 id="清除容器内所有元素"><a class="markdownIt-Anchor" href="#清除容器内所有元素"></a> 清除容器内所有元素</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; obj;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">    obj.push_back(temp);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; obj[i] &lt;&lt; <span class="string">","</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">obj.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; obj.<span class="built_in">size</span>(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; obj[i] &lt;&lt; <span class="string">","</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试与返回结果如下所示：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,</span><br></pre></td></tr></table></figure>
<h2 id="容器元素排序"><a class="markdownIt-Anchor" href="#容器元素排序"></a> 容器元素排序</h2>
<p>我们需要用到头文件algorithm中的sort方法，所以首先引入头文件：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::sort;</span><br></pre></td></tr></table></figure>
<p>引入后，我们使用以下代码测试：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; obj;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">    obj.push_back(temp);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; obj[i] &lt;&lt; <span class="string">","</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">sort(obj.<span class="built_in">begin</span>(), obj.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; obj.<span class="built_in">size</span>(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; obj[i] &lt;&lt; <span class="string">","</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">reverse(obj.<span class="built_in">begin</span>(), obj.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; obj.<span class="built_in">size</span>(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; obj[i] &lt;&lt; <span class="string">","</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码测试与返回结果如下所示：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">8</span> <span class="number">6</span> <span class="number">9</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">4</span>,</span><br><span class="line"><span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,</span><br><span class="line"><span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">1</span>,</span><br></pre></td></tr></table></figure>
<p>这里，我们用到了begin和end函数，当容器中有元素时，begin操作指向第一个元素，end操作则指向容器末端元素的“下一个”，即指向了一个不存在的元素，我们在<a href="#%E8%BF%AD%E4%BB%A3%E5%99%A8">迭代器</a>一节中将会进一步看到这两个函数的使用。</p>
<p>若需要从大到小排序，我们只需要添加sort函数的参数并重写规则即可：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; obj;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">    obj.push_back(temp);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; obj[i] &lt;&lt; <span class="string">","</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">sort(obj.<span class="built_in">begin</span>(), obj.<span class="built_in">end</span>(), compare);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; obj.<span class="built_in">size</span>(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; obj[i] &lt;&lt; <span class="string">","</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>compare函数内容如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b; <span class="comment">//降序排列</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码测试与返回结果如下所示：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">9</span> <span class="number">8</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="number">1</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">6</span>,</span><br><span class="line"><span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">1</span>,</span><br></pre></td></tr></table></figure>
<p>除此以外，我们还需要迭代器辅助实现一些功能。</p>
<h1 id="迭代器"><a class="markdownIt-Anchor" href="#迭代器"></a> 迭代器</h1>
<h2 id="迭代器定义"><a class="markdownIt-Anchor" href="#迭代器定义"></a> 迭代器定义</h2>
<p>以下这段定义引自维基百科：</p>
<blockquote>
<p>迭代器（iterator）有时又称游标（cursor）是程式设计的软件设计模式，可在容器物件（container，例如链表或阵列）上遍访的介面，设计人员无需关心容器物件的内存分配的实现细节。</p>
</blockquote>
<p>简单来说，迭代器(iterator)是一中检查容器内元素并遍历元素的数据类型。<br />
那么我们需要用迭代器干什么呢？ 很简单，遍历。</p>
<h2 id="vector引用iterator实例"><a class="markdownIt-Anchor" href="#vector引用iterator实例"></a> vector引用iterator实例</h2>
<h3 id="遍历"><a class="markdownIt-Anchor" href="#遍历"></a> 遍历</h3>
<p>迭代器可通过自增操作来访问迭代器所指向的元素，可以类比一下C语言中的指针。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; obj;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">    obj.push_back(temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (it = obj.<span class="built_in">begin</span>(); it != obj.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">", "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试与返回结果如下所示：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>,</span><br></pre></td></tr></table></figure>
<h3 id="查找"><a class="markdownIt-Anchor" href="#查找"></a> 查找</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it; <span class="comment">//定义迭代器</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; obj;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">    obj.push_back(temp);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; obj[i] &lt;&lt; <span class="string">","</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">it = <span class="built_in">find</span>(obj.<span class="built_in">begin</span>(), obj.<span class="built_in">end</span>(), <span class="number">3</span>); <span class="comment">//查找目标为数字3</span></span><br><span class="line"><span class="keyword">if</span> (it == obj.<span class="built_in">end</span>())</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (it != obj.<span class="built_in">end</span>())</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<p>测试与返回结果如下所示：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,</span><br><span class="line">YES</span><br></pre></td></tr></table></figure>
<h1 id="参考文献"><a class="markdownIt-Anchor" href="#参考文献"></a> 参考文献</h1>
<ul>
<li><a href="https://www.runoob.com/w3cnote/cpp-vector-container-analysis.html" target="_blank" rel="noopener">C++ vector 容器浅析</a></li>
<li><a href="https://blog.csdn.net/duan19920101/article/details/50617190" target="_blank" rel="noopener">C++ 中vector的使用方法</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%BF%AD%E4%BB%A3%E5%99%A8" target="_blank" rel="noopener">迭代器</a></li>
<li><a href="https://blog.csdn.net/zhanh1218/article/details/33340959" target="_blank" rel="noopener">C/C++迭代器使用详解</a></li>
<li><a href="https://www.kancloud.cn/wangshubo1989/vector/101102" target="_blank" rel="noopener">实战c++中的vector系列</a></li>
</ul>
]]></content>
      <categories>
        <category>program</category>
        <category>c</category>
      </categories>
      <tags>
        <tag>program</tag>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ String函数用法</title>
    <url>/program/c/C-String%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>总结一下C++中String的方法</p>
</blockquote>
<a id="more"></a>
<h1 id="运算符重载"><a class="markdownIt-Anchor" href="#运算符重载"></a> 运算符重载</h1>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">+, +=</td>
<td style="text-align:center">连接字符串</td>
</tr>
<tr>
<td style="text-align:center">=</td>
<td style="text-align:center">字符串赋值</td>
</tr>
<tr>
<td style="text-align:center">&gt;, &gt;=, &lt;, &lt;=</td>
<td style="text-align:center">字符串比较</td>
</tr>
<tr>
<td style="text-align:center">==, !=</td>
<td style="text-align:center">比较字符串</td>
</tr>
<tr>
<td style="text-align:center">&lt;&lt;, &gt;&gt;</td>
<td style="text-align:center">输入，输出字符串</td>
</tr>
</tbody>
</table>
<h1 id="常用函数"><a class="markdownIt-Anchor" href="#常用函数"></a> 常用函数</h1>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; str.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;     <span class="comment">//返回字符串长度</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str.length() &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">//返回字符串长度</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str.empty() &lt;&lt; <span class="built_in">endl</span>;    <span class="comment">//检查 str 是否为空，为空返回 1，否则返回 0</span></span><br></pre></td></tr></table></figure>
<p>测试与返回结果如下所示：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="number">123456</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>
<h1 id="查找"><a class="markdownIt-Anchor" href="#查找"></a> 查找</h1>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str.<span class="built_in">find</span>(<span class="string">"test"</span>) &lt;&lt; <span class="built_in">endl</span> ;                  <span class="comment">//返回字符串 test 在 str 的位置</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str.<span class="built_in">find</span>(<span class="string">"test"</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;                <span class="comment">//在 str[2]~str[n-1] 范围内查找并返回字符串 test 在 str 的位置</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str.rfind(<span class="string">"test"</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;               <span class="comment">//在 str[0]~str[2] 范围内查找并返回字符串 test 在 str 的位置</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str.find_first_of(<span class="string">"strTest"</span>) &lt;&lt; <span class="built_in">endl</span>;       <span class="comment">//返回 strTest 中任何一个字符首次在 str 中出现的位置</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str.find_first_of(<span class="string">"strTest"</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;    <span class="comment">//返回 strTest 中任何一个字符首次在 str[2]~str[n-1] 范围中出现的位置</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str.find_first_not_of(<span class="string">"strTest"</span>) &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">//返回除 strTest 以外的任何一个字符在 str 中首次出现的位置</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str.find_first_not_of(<span class="string">"strTest"</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//返回除 strTest 以外的任何一个字符在 str[2]~str[n-1] 范围中首次出现的位置</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str.find_last_of(<span class="string">"strTest"</span>) &lt;&lt; <span class="built_in">endl</span>;        <span class="comment">//返回 strTest 中任何一个字符最后一次在 str 中出现的位置</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str.find_last_of(<span class="string">"strTest"</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;     <span class="comment">//返回 strTest 中任何一个字符最后一次在 str[0]~str[2] 范围中出现的位置</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str.find_last_not_of(<span class="string">"strTest"</span>) &lt;&lt; <span class="built_in">endl</span>;    <span class="comment">//返回除 strTest 以外的任何一个字符在 str 中最后一次出现的位置</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str.find_last_not_of(<span class="string">"strTest"</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//返回除 strTest 以外的任何一个字符在 str[0]~str[2] 范围中最后一次出现的位置</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">string</span>::npos;                               <span class="comment">//以上函数如果没有找到，均返回string::npos</span></span><br></pre></td></tr></table></figure>
<p>测试与返回结果如下所示：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="number">0123</span>test89strTest //测试数据，以下依次为结果</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">4294967295</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">4294967295</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">4294967295</span></span><br></pre></td></tr></table></figure>
<h1 id="子串"><a class="markdownIt-Anchor" href="#子串"></a> 子串</h1>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; str.substr(<span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;      <span class="comment">//返回 [3] 及以后的子串</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str.substr(<span class="number">2</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">//返回 str[2]~str[2+(4-1)] 子串(即从[2]开始4个字符组成的字符串)</span></span><br></pre></td></tr></table></figure>
<p>测试与返回结果如下所示：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">myStringTest //测试数据，以下依次为结果,下同</span><br><span class="line">tringTest</span><br><span class="line">Stri</span><br></pre></td></tr></table></figure>
<h1 id="替换"><a class="markdownIt-Anchor" href="#替换"></a> 替换</h1>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; str.replace(<span class="number">2</span>, <span class="number">4</span>, <span class="string">"test"</span>) &lt;&lt; <span class="built_in">endl</span>;        <span class="comment">//返回把 [2]~[2+(4-1)] 的内容替换为 "test" 后的新字符串</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str.replace(<span class="number">2</span>, <span class="number">4</span>, <span class="string">"qwer"</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">//返回把 [2]~[2+(4-1)] 的内容替换为 "qwer" 的前3个字符后的新字符串</span></span><br></pre></td></tr></table></figure>
<p>测试与返回结果如下所示：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yyyyyyyyyyyyyy</span><br><span class="line">yytestyyyyyyyy</span><br><span class="line">yyqweyyyyyyyy</span><br></pre></td></tr></table></figure>
<h1 id="插入"><a class="markdownIt-Anchor" href="#插入"></a> 插入</h1>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt;  str.insert(<span class="number">2</span>, <span class="string">"test"</span>) &lt;&lt; <span class="built_in">endl</span>;            <span class="comment">//从 [2] 位置开始添加字符串 "test"，并返回形成的新字符串</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;  str.insert(<span class="number">2</span>, <span class="string">"string"</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;       <span class="comment">//从 [2] 位置开始添加字符串 "string" 的前 3 个字符，并返回形成的新字符串</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;  str.insert(<span class="number">2</span>, <span class="string">"123456"</span>, <span class="number">1</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;    <span class="comment">//从 [2] 位置开始添加字符串 "123456" 的前 [2]~[2+(3-1)] 个字符，并返回形成的新字符串</span></span><br></pre></td></tr></table></figure>
<p>测试与返回结果如下所示：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yyyyyyyyy</span><br><span class="line">yytestyyyyyyy</span><br><span class="line">yystrtestyyyyyyy</span><br><span class="line">yy234strtestyyyyyyy</span><br></pre></td></tr></table></figure>
<h1 id="追加"><a class="markdownIt-Anchor" href="#追加"></a> 追加</h1>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">str.push_back(<span class="string">'1'</span>);               <span class="comment">//在 str 末尾添加字符'1'</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str.append(<span class="string">"abc"</span>) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//在 str 末尾添加字符串"abc"</span></span><br></pre></td></tr></table></figure>
<p>测试与返回结果如下所示：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">asdf</span><br><span class="line">asdf1</span><br><span class="line">asdf1abc</span><br></pre></td></tr></table></figure>
<h1 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h1>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> str1 = str;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str.erase(<span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//删除 [3] 及以后的字符，并返回新字符串</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str1.erase(<span class="number">3</span>, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//删除从 [3] 开始的 5 个字符，并返回新字符串</span></span><br></pre></td></tr></table></figure>
<p>测试与返回结果如下所示：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="number">1234567890</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">12390</span></span><br></pre></td></tr></table></figure>
<h1 id="交换"><a class="markdownIt-Anchor" href="#交换"></a> 交换</h1>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> str1, str2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str1;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str2;</span><br><span class="line">str1.swap(str2);<span class="comment">//把 str1 与 str2 交换</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str1 &lt;&lt; <span class="built_in">endl</span> &lt;&lt; str2 &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<p>测试与返回结果如下所示：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="number">123456</span></span><br><span class="line">qwerty</span><br><span class="line"></span><br><span class="line">qwerty</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure>
<h1 id="参考文献"><a class="markdownIt-Anchor" href="#参考文献"></a> 参考文献</h1>
<p><a href="https://www.renfei.org/blog/introduction-to-cpp-string.html" target="_blank" rel="noopener">C++ string 字符串函数详解</a><br />
<a href="http://www.cplusplus.com/reference/string/string/" target="_blank" rel="noopener">string - C++ Reference</a></p>
]]></content>
      <categories>
        <category>program</category>
        <category>c</category>
      </categories>
      <tags>
        <tag>program</tag>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>建站日志</title>
    <url>/hexo/%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<blockquote>
<p>忙里偷闲把博客升级一下，结果发现NexT主题都到7.1版本了，原先的方案不再适用，就从头建立了一个新的版本，一点一点修改。</p>
</blockquote>
<a id="more"></a>
<p>感谢<a href="https://tding.top/" target="_blank" rel="noopener">小丁的个人博客</a>给予我的指导，否则就没法完成这次升级了。</p>
<h1 id="安装hexo"><a class="markdownIt-Anchor" href="#安装hexo"></a> 安装Hexo</h1>
<blockquote>
<p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官网</a></p>
</blockquote>
<h2 id="安装hexo所需环境"><a class="markdownIt-Anchor" href="#安装hexo所需环境"></a> 安装Hexo所需环境</h2>
<ul>
<li>安装<a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li>
<li>安装<a href="https://git-scm.com" target="_blank" rel="noopener">git</a></li>
</ul>
<h2 id="安装hexo-2"><a class="markdownIt-Anchor" href="#安装hexo-2"></a> 安装Hexo</h2>
<p><code>$ npm install -g hexo-cli</code></p>
<h1 id="建站初始化"><a class="markdownIt-Anchor" href="#建站初始化"></a> 建站初始化</h1>
<h2 id="初始化hexo文件夹"><a class="markdownIt-Anchor" href="#初始化hexo文件夹"></a> 初始化Hexo文件夹</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;  </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;  </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install --save</span></span><br></pre></td></tr></table></figure>
<h2 id="对站点配置文件进行修改"><a class="markdownIt-Anchor" href="#对站点配置文件进行修改"></a> 对<code>站点配置文件</code>进行修改</h2>
<p><code>_config.yml</code>是整个博客的站点配置文件，我们需要对其进行修改，满足自己的需要。例如我的博客是这样的：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="string">title:</span> Ecool</span><br><span class="line"><span class="string">subtitle:</span> <span class="string">'little home'</span></span><br><span class="line"><span class="string">description:</span> <span class="string">'What I like'</span></span><br><span class="line"><span class="string">keywords:</span></span><br><span class="line"><span class="string">author:</span> Zyc</span><br><span class="line"><span class="string">language:</span> zh-CN</span><br><span class="line"><span class="string">timezone:</span> <span class="string">'Asia/Shanghai'</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>这是我博客配置文件的一部分，当然大家可以根据自己的需要进行修改。</p>
<h1 id="安装next主题"><a class="markdownIt-Anchor" href="#安装next主题"></a> 安装NexT主题</h1>
<blockquote>
<p>本部分及以下“NexT主题配置”相关内容可以参考<a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT官方文档</a></p>
</blockquote>
<h2 id="下载主题"><a class="markdownIt-Anchor" href="#下载主题"></a> 下载主题</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> your-hexo-site  </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure>
<h2 id="启用主题"><a class="markdownIt-Anchor" href="#启用主题"></a> 启用主题</h2>
<p>在<code>站点配置文件</code>启用主题<br />
<code>theme: next</code></p>
<p>至此，基础的配置已经完成，执行以下命令即可看到结果：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<h1 id="next主题配置"><a class="markdownIt-Anchor" href="#next主题配置"></a> NexT主题配置</h1>
<h2 id="相册效果实现"><a class="markdownIt-Anchor" href="#相册效果实现"></a> 相册效果实现</h2>
<p>为了实现相册的效果，我借鉴了之前的相册文件，这里感谢<a href="https://asdfv1929.github.io/2018/05/26/next-add-photos/" target="_blank" rel="noopener">asdfv1929</a>大佬和<a href="https://github.com/MikeCoder/hexo-tag-cloud" target="_blank" rel="noopener">hexo-tag-cloud</a>提供的思路，关于插件<a href="https://github.com/jygzyc/hexo-next-photos" target="_blank" rel="noopener">hexo-next-photos</a>可以参考<a href="https://jygzyc.github.io/hexo/hexo-next-photos/">这篇文章</a>。</p>
<p>为了保证照片的传输速度，我对原始照片进行了压缩，对原始相片的压缩和处理文件参照<a href="#%E6%96%87%E4%BB%B6%E5%BC%95%E7%94%A8%E5%A4%87%E4%BB%BD">文件引用备份</a>。</p>
<h3 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h3>
<ul>
<li><a href="https://asdfv1929.github.io/2018/05/26/next-add-photos/" target="_blank" rel="noopener">Hexo NexT主题内添加相册功能</a></li>
<li><a href="http://www.lawlite.me/2017/04/13/Hexo-Github%E5%AE%9E%E7%8E%B0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener">Hexo+Github实现相册功能</a></li>
</ul>
<h2 id="评论系统"><a class="markdownIt-Anchor" href="#评论系统"></a> 评论系统</h2>
<p>我在这里使用的是<a href="https://valine.js.org/" target="_blank" rel="noopener">valine</a>，个人感觉这个更简洁一点。我主要参考了<a href="https://qdhaiqiang.github.io/2018/11/24/hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8Valine%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">hexo+next使用Valine评论系统</a>建立评论系统。</p>
<h3 id="注册应用"><a class="markdownIt-Anchor" href="#注册应用"></a> 注册应用</h3>
<p>注册LeanCloud并创建一个开发版应用（免费）<br />
链接：<a href="https://www.leancloud.cn/" target="_blank" rel="noopener">https://www.leancloud.cn/</a></p>
<h3 id="创建class"><a class="markdownIt-Anchor" href="#创建class"></a> 创建Class</h3>
<p>进入你创建的应用后，点击存储-&gt; 创建Class，将Class的名称命名为Comment。</p>
<p>将Class访问权限和默认ACL权限全部设置为所有用户。</p>
<h3 id="服务设置"><a class="markdownIt-Anchor" href="#服务设置"></a> 服务设置</h3>
<p>在设置-&gt; 安全中心中，关闭除<code>数据存储</code>以外的全部开关。</p>
<p>修改下方<code>Web安全域名</code>为：<code>自己的域名：端口号</code>，以我的博客为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;jygzyc.github.io:443</span><br></pre></td></tr></table></figure>
<h3 id="修改主题配置文件"><a class="markdownIt-Anchor" href="#修改主题配置文件"></a> 修改主题配置文件</h3>
<p>在<code>/source/_data/next.yml</code>下修改自己的<code>appid</code>和<code>appkey</code>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span>  <span class="comment"># Your leancloud application appid</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="comment"># Your leancloud application appkey</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">true</span> <span class="comment"># 邮件通知开关</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">欢迎评论呀！</span> <span class="comment"># Comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># Gravatar style</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># Custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">language:</span> <span class="comment"># Language, available values: en, zh-cn</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span> <span class="comment"># Article reading statistic</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">true</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">false</span> <span class="comment"># Whether to record the commenter IP</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></span><br><span class="line">  <span class="comment">#post_meta_order: 0</span></span><br></pre></td></tr></table></figure>
<h3 id="开启邮件通知"><a class="markdownIt-Anchor" href="#开启邮件通知"></a> 开启邮件通知</h3>
<ul>
<li>
<p>修改LeanCloud中，设置-&gt;邮件模版-&gt;用于重置密码的邮件主题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">你在&#123;&#123;appname&#125;&#125;的评论中收到了新的回复</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修改内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;Hi, &#123;&#123;username&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">你在&#123;&#123;appname&#125;&#125;的评论中收到了新的回复</span><br><span class="line">&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href&#x3D;&quot;你的博客主页&quot; style&#x3D;&quot;display: inline-block; padding: 10px 20px; border-radius: 4px; background-color: #3090e4; color: #fff; text-decoration: none;&quot;&gt;马上查看&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>保存即可。</p>
<h2 id="网页效果修改"><a class="markdownIt-Anchor" href="#网页效果修改"></a> 网页效果修改</h2>
<p>在新版Hexo中，引入了数据文件这个概念，简单来说就是将个人的配置文件放在<code>/source/_data/</code>目录下，而不修改主题文件夹中的文件。这样做能够更方便地使用<code>git pull</code>升级主题，不用解决冲突的问题。</p>
<h3 id="归档页面时间轴效果"><a class="markdownIt-Anchor" href="#归档页面时间轴效果"></a> 归档页面时间轴效果</h3>
<blockquote>
<p>我也想不起来当时我参考的文章了，如果原作者看见的话请联系我，我会把参考链接补上。</p>
</blockquote>
<p>效果可以参考我的归档界面，将如下代码添加到<code>/source/_data/styles.styl</code>：</p>
<figure class="highlight styl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 时间轴样式</span></span><br><span class="line"><span class="selector-class">.posts-collapse</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line">@media (<span class="attribute">max-width</span>: <span class="number">1023px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.posts-collapse</span> &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 时间轴左边线条</span></span><br><span class="line"><span class="selector-class">.posts-collapse</span>::before&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: linear-gradient(<span class="number">180deg</span>,<span class="number">#f79533</span> <span class="number">0</span>,<span class="number">#f37055</span> <span class="number">15%</span>,<span class="number">#ef4e7b</span> <span class="number">30%</span>,<span class="number">#a166ab</span> <span class="number">44%</span>,<span class="number">#5073b8</span> <span class="number">58%</span>,<span class="number">#1098ad</span> <span class="number">72%</span>,<span class="number">#07b39b</span> <span class="number">86%</span>,<span class="number">#6dba82</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 时间轴左边线条圆点颜色</span></span><br><span class="line"><span class="selector-class">.posts-collapse</span> <span class="selector-class">.collection-title</span>::before &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: rgb(<span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 时间轴文章标题左边圆点颜色</span></span><br><span class="line"><span class="selector-class">.posts-collapse</span> <span class="selector-class">.post-header</span>::before &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: rgb(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 时间轴年份</span></span><br><span class="line"><span class="selector-class">.posts-collapse</span> <span class="selector-class">.collection-year</span> <span class="selector-class">.collection-header</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 时间轴文章标题</span></span><br><span class="line"><span class="selector-class">.posts-collapse</span> <span class="selector-class">.post-header</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: rgb(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.posts-collapse</span> <span class="selector-class">.post-header</span> <span class="selector-tag">a</span>:hover &#123;</span><br><span class="line">    <span class="attribute">color</span>: rgb(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 时间轴文章标题底部虚线</span></span><br><span class="line"><span class="selector-class">.posts-collapse</span> <span class="selector-class">.post-header</span>:hover &#123;</span><br><span class="line">    <span class="attribute">border-bottom-color</span>: rgb(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// archives页面顶部文字</span></span><br><span class="line"><span class="selector-class">.page-archive</span> <span class="selector-class">.collection-year</span> <span class="selector-class">.collection-header</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: rgb(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// archives页面时间轴左边线条第一个圆点颜色</span></span><br><span class="line"><span class="selector-class">.page-archive</span> <span class="selector-class">.posts-collapse</span> <span class="selector-class">.collection-title</span>:before &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: rgb(<span class="number">250</span>, <span class="number">250</span>, <span class="number">250</span>);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="number">0px</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="近期文章"><a class="markdownIt-Anchor" href="#近期文章"></a> 近期文章</h3>
<p>参考<a href="https://tding.top/archives/2bd6d82.html" target="_blank" rel="noopener">Hexo-NexT 版本更新记录</a>，将如下代码添加到<code>/source/_data/sidebar.swig</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;# 近期文章 #&#125;</span><br><span class="line">&#123;% if theme.recent_posts %&#125;</span><br><span class="line">    &lt;div class&#x3D;&quot;links-of-blogroll motion-element &#123;&#123; &quot;links-of-blogroll-&quot; + theme.recent_posts_layout  &#125;&#125;&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;links-of-blogroll-title&quot;&gt;</span><br><span class="line">        &lt;!-- modify icon to fire by szw --&gt;</span><br><span class="line">        &lt;i class&#x3D;&quot;fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">        &#123;&#123; theme.recent_posts_title &#125;&#125;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;ul class&#x3D;&quot;links-of-blogroll-list&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &#123;% set posts &#x3D; site.posts.sort(&#39;-date&#39;).toArray() %&#125;</span><br><span class="line">        &#123;% for post in posts.slice(&#39;0&#39;, &#39;4&#39;) %&#125;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;a href&#x3D;&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; title&#x3D;&quot;&#123;&#123; post.title &#125;&#125;&quot; target&#x3D;&quot;_blank&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">          &lt;&#x2F;li&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">      &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>除此以外，可以参考<a href="https://tding.top/" target="_blank" rel="noopener">小丁的个人博客</a>，大神记录了很多效果，因为杂项太多，我就不一一叙述了，如果之后有比较重要的，我会持续更新。</p>
<h1 id="文件引用备份"><a class="markdownIt-Anchor" href="#文件引用备份"></a> <s>文件引用备份</s></h1>
<blockquote>
<p>已启用hexo-next-photos进行照片处理</p>
</blockquote>
<p>这一部分主要实现文件的备份和处理，主要功能如下：</p>
<ul>
<li>处理原照片</li>
<li>备份<code>_posts</code>中的图片</li>
<li>通过<code>git</code>进行推送</li>
</ul>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"><span class="comment"># %%</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> glob <span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># %%</span></span><br><span class="line">threshold = <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">blog_file_dir = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">source_photos_dir = os.path.join(blog_file_dir, <span class="string">"originPhotos"</span>)</span><br><span class="line">target_photos_dir = os.path.join(blog_file_dir, <span class="string">"photos"</span>)</span><br><span class="line">blog_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line"><span class="comment"># %%</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageProcess</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    This class is used to read photos and compress them</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">resize_images</span><span class="params">(self, source_dir, target_dir, threshold)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        以2M为阈值压缩图片，并放入新的文件夹中 \n</span></span><br><span class="line"><span class="string">        threshold: 阈值</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        filenames = glob(<span class="string">'&#123;&#125;/*'</span>.format(source_dir))</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(target_dir):</span><br><span class="line">            os.makedirs(target_dir)</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">            filesize = os.path.getsize(filename)</span><br><span class="line">            <span class="keyword">if</span> filesize &gt;= threshold: </span><br><span class="line">                <span class="keyword">with</span> Image.open(filename) <span class="keyword">as</span> im:</span><br><span class="line">                    width, height = im.size</span><br><span class="line">                    <span class="keyword">if</span> width &gt;= height:</span><br><span class="line">                        new_width = int(math.sqrt(threshold/<span class="number">2</span>))</span><br><span class="line">                        new_height = int(new_width * height * <span class="number">1.0</span> / width)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        new_height = int(math.sqrt(threshold/<span class="number">2</span>))</span><br><span class="line">                        new_width = int(new_height * width * <span class="number">1.0</span> / height)</span><br><span class="line">                    resized_im = im.resize((new_width, new_height))</span><br><span class="line">                    output_filename = filename.replace(source_dir, target_dir)</span><br><span class="line">                    resized_im.save(output_filename)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">with</span> Image.open(filename) <span class="keyword">as</span> im:</span><br><span class="line">                    output_filename = filename.replace(source_dir, target_dir)</span><br><span class="line">                    im.save(output_filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Copy_posts</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    This class is used to copy `_posts` to blog_file_dir</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">copy_posts</span><span class="params">(self, source_dir, target_dir)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> files <span class="keyword">in</span> os.listdir(source_dir):</span><br><span class="line">            srcFile = os.path.join(source_dir, files)</span><br><span class="line">            tarFile = os.path.join(target_dir, files)</span><br><span class="line">            <span class="keyword">if</span> os.path.isfile(srcFile) <span class="keyword">and</span> os.path.splitext(srcFile)[<span class="number">1</span>] != <span class="string">'.md'</span>:</span><br><span class="line">                shutil.copy(srcFile, tarFile)</span><br><span class="line">            <span class="keyword">if</span> os.path.isdir(srcFile):</span><br><span class="line">                <span class="keyword">if</span> os.path.exists(tarFile) == <span class="literal">False</span>:</span><br><span class="line">                    os.makedirs(tarFile)</span><br><span class="line">                    self.copy_posts(srcFile, tarFile)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove_posts</span><span class="params">(self, workdir)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(workdir):</span><br><span class="line">            shutil.rmtree(workdir)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeDir</span><span class="params">(target_dir)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    change work dir</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    os.chdir(target_dir)</span><br><span class="line">    print(os.getcwd())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">git_operation</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    git 命令行函数，将仓库提交</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    git add . \n</span></span><br><span class="line"><span class="string">    git commit -m "update" \n</span></span><br><span class="line"><span class="string">    git push origin master \n</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    os.system(<span class="string">'git add .'</span>)</span><br><span class="line">    os.system(<span class="string">'git commit -m "update"'</span>)</span><br><span class="line">    os.system(<span class="string">'git push origin master'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># %%</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">"---- Image Process Start----"</span>)</span><br><span class="line">    imm = ImageProcess()</span><br><span class="line">    imm.resize_images(source_photos_dir, target_photos_dir, threshold)</span><br><span class="line">    print(<span class="string">"---- Image Process Over----"</span>)</span><br><span class="line">    print(<span class="string">"---- _posts Process Start----"</span>)</span><br><span class="line">    copyPosts = Copy_posts()</span><br><span class="line">    postsDir = os.path.join(blog_dir, <span class="string">'source\\_posts'</span>)</span><br><span class="line">    tarPostsDir = os.path.join(blog_file_dir, <span class="string">'_posts'</span>)</span><br><span class="line">    copyPosts.remove_posts(tarPostsDir)</span><br><span class="line">    copyPosts.copy_posts(postsDir, tarPostsDir)</span><br><span class="line">    print(<span class="string">"---- _posts Process Over----"</span>)</span><br><span class="line">    changeDir(blog_file_dir)</span><br><span class="line">    git_operation()</span><br></pre></td></tr></table></figure>
<p>目录结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blog&#x2F;</span><br><span class="line">│  .gitignore</span><br><span class="line">│  package.json</span><br><span class="line">│  _config.yml</span><br><span class="line">│</span><br><span class="line">├─blog_file</span><br><span class="line">│  │  .gitignore</span><br><span class="line">│  │  photos.py         # python文件</span><br><span class="line">│  │  requirements.txt</span><br><span class="line">│  ├─downloads</span><br><span class="line">│  │      ...</span><br><span class="line">│  ├─originPhotos</span><br><span class="line">│  │      ...</span><br><span class="line">│  ├─photos</span><br><span class="line">│  │      ...</span><br><span class="line">│  └─_posts</span><br><span class="line">│      ├─1&#x2F;</span><br><span class="line">│      │      ...</span><br><span class="line">│      ├─2&#x2F;</span><br><span class="line">│      │      ...</span><br><span class="line">│ ...</span><br></pre></td></tr></table></figure>
<p>运行python脚本后，就可以进行处理了。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>reverse-write-up</title>
    <url>/writeup/reverse-write-up/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="第三届上海市大学生网络安全大赛crackme"><a class="markdownIt-Anchor" href="#第三届上海市大学生网络安全大赛crackme"></a> 第三届上海市大学生网络安全大赛Crackme</h1>
<p><a href="https://github.com/jygzyc/blog-back-up/raw/master/downloads/crackme_20190324.zip" target="_blank" rel="noopener">download</a><br />
用PEID查壳，发现结果如下：</p>
<p><img data-src="1_1.png" alt="1_1" /><br />
用od加载手动脱壳：<br />
<img data-src="1_2.png" alt="1_2" /><br />
看见<code>pushfd pushad</code>,用ESP定律脱壳，先调试到004061AD，然后在寄存器窗口右键单击<code>ESP 0018FF68</code>，选择<code>HW break[ESP]</code>(下硬件断点)。然后F9，跳到<code>popfd</code>。<br />
<img data-src="1_3.png" alt="1_3" /><br />
看见下面的跳转指令跨度很大，说明接近OEP了。F8跳转，如果出现大段dd，按<code>Ctrl+A</code>让od重新识别。<br />
<img data-src="1_4.png" alt="1_4" /><br />
看见004101621，F7进去后看见OEP，脱壳成功。</p>
<p>接下来查找字符串<code>Please Input Flag:</code>，找到之后跳转，我们来到了主要的处理部分，下断dump程序。<br />
<img data-src="1_5.png" alt="1_5" /></p>
<p>利用LordPE成功dump程序后（注意管理员权限），IDA打开，F5，可以看见程序逻辑。<br />
<img data-src="1_6.png" alt="1_6" /></p>
<p>可以看出flag长度为42，且与402130异或后为402150的数据，我们用od打开，修改代码。<br />
<img data-src="1_7.png" alt="1_7" /><br />
运行到这里时，我们修改ecx的值为0x2A（42），让它继续运行。<br />
<img data-src="1_8.png" alt="1_8" /><br />
在这里我们看到了算法代码，那么我们修改代码，让<code>this_is_not_flag</code>和402150的数据异或，就能得到flag了。<br />
<img data-src="1_9.png" alt="1_9" /></p>
<blockquote>
<p>感谢吴神的指导</p>
</blockquote>
<h1 id="jctf-2014-re200"><a class="markdownIt-Anchor" href="#jctf-2014-re200"></a> JCTF 2014 re200</h1>
<p><a href="https://github.com/jygzyc/blog-back-up/raw/master/downloads/re200_20190325" target="_blank" rel="noopener">download</a><br />
拿到文件查看文件格式是MS-DOS，拖到IDA发现PE结构有问题，修改PE结构。将Offset to New EXE Header从E9改为E8。往下看，PE开头还有问题，将FF改为00。保存文件，拖到IDA打开。<br />
<img data-src="2_1.png" alt="2_1" /><br />
可以看到题目要求输入长度为9位，前三位要满足相应的条件：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">i</span> * <span class="built_in">j</span> * k / <span class="number">11</span> = <span class="number">106</span> </span><br><span class="line">k = <span class="built_in">i</span> ^ <span class="built_in">j</span> </span><br><span class="line">(<span class="built_in">i</span> + <span class="built_in">j</span> + k) <span class="comment">% 100 = 34</span></span><br></pre></td></tr></table></figure>
<p>继续看。<br />
<img data-src="2_2.png" alt="2_2" /><br />
我们发现了flag的构成方式，是由<code>jlflag{</code>和中间三个数再加上<code>abc}</code>拼接而成，中间三个数只和我们输入的前三个数有关，尽管之后还有判断流程，但是为了省事，我们直接写题解：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">re200</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100000</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; <span class="number">0x100000</span>; ++j)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">size_t</span> k = (i ^ j) + <span class="number">4</span>;</span><br><span class="line">			<span class="keyword">if</span> (i * j * k / <span class="number">0xb</span> == <span class="number">0x6a</span> &amp;&amp; (i + j + k) % <span class="number">100</span> == <span class="number">0x22</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"jlflag&#123;"</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%d%d%d"</span>, i, j, k);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"abc&#125;\n"</span>);</span><br><span class="line">				<span class="comment">// return 1;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后挨个试，最后结果是<code>jlflag{15613abc}</code>。</p>
<blockquote>
<p>得复习一下PE头的知识了</p>
</blockquote>
<h1 id="2017全国大学生信息安全竞赛"><a class="markdownIt-Anchor" href="#2017全国大学生信息安全竞赛"></a> 2017全国大学生信息安全竞赛</h1>
<h2 id="填数游戏"><a class="markdownIt-Anchor" href="#填数游戏"></a> 填数游戏</h2>
<p><a href="https://github.com/jygzyc/blog-back-up/raw/master/downloads/numgame_8808BCE6D17A3EF92461A50079264767.zip" target="_blank" rel="noopener">download</a></p>
<blockquote>
<p>题目是填数游戏，做题的时候就朝着这个方向去想。</p>
</blockquote>
<p>把题目拖进IDA，就能够看到主要的函数。<br />
<img data-src="3_1_1.png" alt="3_1_1" /><br />
发现要success要check<code>v4</code>的值，我们进入check函数。<br />
<img data-src="3_1_2.png" alt="3_1_2" /><br />
进入check函数，看见有三个部分：<br />
<code>check_block()</code>,<code>check_col()</code>,<code>check_row</code>函数，分别查看这三个函数：<br />
<img data-src="3_1_3.png" alt="3_1_3" /><br />
<img data-src="3_1_4.png" alt="3_1_4" /><br />
<img data-src="3_1_5.png" alt="3_1_5" /><br />
可见<code>check_col()</code>和<code>check_row()</code>几乎一样，一个检查列，一个检查行，而<code>check_block()</code>则是检查一个3x3的块，这让我们想到了数独。继续看：<br />
<img data-src="3_1_6.png" alt="3_1_6" /><br />
除了检查函数，我们还发现了相关<code>set_data()</code>函数，进入函数，我们看到这里是来填数字的，那么这个函数在主函数的参数一定有这个数独的数据，果不其然，我们查看<code>__data_start__</code>，发现了一个很大的数组：<br />
<img data-src="3_1_7.png" alt="3_1_7" /><br />
将数据拷贝出来，处理格式。</p>
<blockquote>
<p>本人不会idc……就只能拷出来处理了，注意处理的时候要把db改成dd。</p>
</blockquote>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">0</span> <span class="number">7</span> <span class="number">5</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">6</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">7</span> </span><br><span class="line"><span class="symbol">9 </span><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">4</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="symbol">2 </span><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="symbol">0 </span><span class="number">3</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5</span> </span><br><span class="line"><span class="symbol">0 </span><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">7</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="symbol">4 </span><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">8</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="symbol">0 </span><span class="number">0</span> <span class="number">5</span> <span class="number">9</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">8</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">8</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>放到在线解数独的网站上，解出结果。<br />
<img data-src="3_1_8.png" alt="3_1_8" /><br />
然后把题目原有的数字都替换成0，即为题解：<br />
<code>340089102508406930016207058060875349709064820854392006093650071170023604602740590</code></p>
<blockquote>
<p>感谢 <a href="https://www.cnblogs.com/zhaijiahui/p/7876005.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhaijiahui/p/7876005.html</a> 给我的提示，不然确实想不到是数独……</p>
</blockquote>
<h2 id="溯源"><a class="markdownIt-Anchor" href="#溯源"></a> 溯源</h2>
<p><a href="https://github.com/jygzyc/blog-back-up/raw/master/downloads/suyuan_AE854FEBFF075867A99BBB4F96D32D05.zip" target="_blank" rel="noopener">download</a></p>
<blockquote>
<p>实话说，这道题没做出来……参考链接如下：</p>
<ul>
<li><a href="https://blog.csdn.net/csu_vc/article/details/78011716" target="_blank" rel="noopener">https://blog.csdn.net/csu_vc/article/details/78011716</a></li>
<li><a href="https://bbs.ichunqiu.com/thread-25351-1-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-25351-1-1.html</a></li>
</ul>
</blockquote>
<p>把文件拖入IDA，然后直接就能看到关键字符串，对核心代码进行分析:<br />
<img data-src="3_2_1.png" alt="3_2_1" /><br />
详细的分析可以看我上面发的两个链接……然后写题解……</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"> </span><br><span class="line">dir_array = [<span class="number">160</span>, <span class="number">142</span>, <span class="number">226</span>, <span class="number">128</span>, <span class="number">189</span>, <span class="number">158</span>, <span class="number">130</span>, <span class="number">145</span>, <span class="number">29</span>, <span class="number">181</span>, <span class="number">223</span>, <span class="number">138</span>, <span class="number">200</span>, <span class="number">152</span>, <span class="number">4</span>, <span class="number">76</span>, <span class="number">25</span>, <span class="number">83</span>, <span class="number">197</span>, <span class="number">181</span>, <span class="number">50</span>, <span class="number">204</span>, <span class="number">116</span>, <span class="number">198</span>, <span class="number">72</span>, <span class="number">96</span>, <span class="number">183</span>, <span class="number">251</span>, <span class="number">41</span>, <span class="number">63</span>, <span class="number">46</span>, <span class="number">254</span>, <span class="number">237</span>, <span class="number">155</span>, <span class="number">86</span>, <span class="number">206</span>, <span class="number">116</span>, <span class="number">155</span>, <span class="number">94</span>, <span class="number">132</span>, <span class="number">228</span>, <span class="number">54</span>, <span class="number">226</span>, <span class="number">88</span>, <span class="number">104</span>, <span class="number">140</span>, <span class="number">83</span>, <span class="number">246</span>, <span class="number">81</span>, <span class="number">19</span>, <span class="number">145</span>, <span class="number">255</span>, <span class="number">1</span>, <span class="number">140</span>, <span class="number">65</span>, <span class="number">82</span>, <span class="number">71</span>, <span class="number">102</span>, <span class="number">206</span>, <span class="number">34</span>, <span class="number">69</span>, <span class="number">75</span>, <span class="number">228</span>, <span class="number">220</span>, <span class="number">104</span>, <span class="number">128</span>, <span class="number">91</span>, <span class="number">76</span>, <span class="number">206</span>, <span class="number">194</span>, <span class="number">115</span>, <span class="number">158</span>, <span class="number">123</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">114</span>, <span class="number">85</span>, <span class="number">189</span>, <span class="number">0</span>, <span class="number">149</span>, <span class="number">132</span>, <span class="number">45</span>, <span class="number">219</span>, <span class="number">153</span>, <span class="number">154</span>, <span class="number">31</span>, <span class="number">179</span>, <span class="number">30</span>, <span class="number">108</span>, <span class="number">199</span>, <span class="number">224</span>, <span class="number">34</span>, <span class="number">223</span>, <span class="number">110</span>, <span class="number">235</span>, <span class="number">106</span>, <span class="number">181</span>, <span class="number">124</span>, <span class="number">175</span>, <span class="number">250</span>, <span class="number">214</span>, <span class="number">172</span>, <span class="number">45</span>, <span class="number">74</span>, <span class="number">147</span>, <span class="number">120</span>, <span class="number">191</span>, <span class="number">60</span>, <span class="number">26</span>, <span class="number">210</span>, <span class="number">224</span>, <span class="number">47</span>, <span class="number">221</span>, <span class="number">70</span>, <span class="number">99</span>, <span class="number">142</span>, <span class="number">20</span>, <span class="number">78</span>, <span class="number">84</span>, <span class="number">83</span>, <span class="number">237</span>, <span class="number">163</span>, <span class="number">210</span>, <span class="number">66</span>, <span class="number">34</span>, <span class="number">140</span>, <span class="number">192</span>, <span class="number">251</span>, <span class="number">98</span>, <span class="number">166</span>, <span class="number">145</span>, <span class="number">195</span>, <span class="number">245</span>, <span class="number">35</span>, <span class="number">254</span>, <span class="number">190</span>, <span class="number">229</span>, <span class="number">70</span>, <span class="number">14</span>, <span class="number">21</span>, <span class="number">245</span>, <span class="number">32</span>, <span class="number">14</span>, <span class="number">145</span>, <span class="number">27</span>, <span class="number">151</span>, <span class="number">6</span>, <span class="number">43</span>, <span class="number">154</span>, <span class="number">205</span>, <span class="number">10</span>, <span class="number">91</span>, <span class="number">151</span>, <span class="number">60</span>, <span class="number">229</span>, <span class="number">182</span>, <span class="number">26</span>, <span class="number">188</span>, <span class="number">125</span>, <span class="number">81</span>, <span class="number">160</span>, <span class="number">163</span>, <span class="number">207</span>, <span class="number">130</span>, <span class="number">19</span>, <span class="number">22</span>, <span class="number">144</span>, <span class="number">144</span>, <span class="number">124</span>, <span class="number">173</span>, <span class="number">222</span>, <span class="number">182</span>, <span class="number">135</span>, <span class="number">239</span>, <span class="number">83</span>, <span class="number">56</span>, <span class="number">250</span>, <span class="number">207</span>, <span class="number">186</span>, <span class="number">211</span>, <span class="number">238</span>, <span class="number">53</span>, <span class="number">103</span>, <span class="number">198</span>, <span class="number">56</span>, <span class="number">67</span>, <span class="number">145</span>, <span class="number">218</span>, <span class="number">190</span>, <span class="number">192</span>, <span class="number">235</span>, <span class="number">210</span>, <span class="number">103</span>, <span class="number">131</span>, <span class="number">231</span>, <span class="number">18</span>, <span class="number">156</span>, <span class="number">113</span>, <span class="number">172</span>, <span class="number">180</span>, <span class="number">93</span>, <span class="number">155</span>, <span class="number">219</span>, <span class="number">96</span>, <span class="number">41</span>, <span class="number">176</span>, <span class="number">29</span>, <span class="number">167</span>, <span class="number">33</span>, <span class="number">158</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">137</span>, <span class="number">166</span>, <span class="number">13</span>, <span class="number">148</span>, <span class="number">195</span>, <span class="number">115</span>, <span class="number">121</span>, <span class="number">129</span>, <span class="number">189</span>, <span class="number">232</span>, <span class="number">133</span>, <span class="number">94</span>, <span class="number">41</span>, <span class="number">78</span>, <span class="number">195</span>, <span class="number">120</span>, <span class="number">91</span>, <span class="number">187</span>, <span class="number">114</span>, <span class="number">187</span>, <span class="number">153</span>, <span class="number">30</span>, <span class="number">51</span>, <span class="number">223</span>, <span class="number">142</span>, <span class="number">239</span>, <span class="number">127</span>, <span class="number">105</span>, <span class="number">200</span>, <span class="number">47</span>, <span class="number">149</span>, <span class="number">88</span>, <span class="number">65</span>, <span class="number">223</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">46</span>, <span class="number">203</span>, <span class="number">181</span>, <span class="number">6</span>, <span class="number">38</span>, <span class="number">237</span>, <span class="number">131</span>, <span class="number">167</span>, <span class="number">107</span>, <span class="number">60</span>, <span class="number">241</span>, <span class="number">161</span>, <span class="number">110</span>, <span class="number">221</span>, <span class="number">175</span>, <span class="number">181</span>, <span class="number">236</span>, <span class="number">90</span>, <span class="number">226</span>, <span class="number">96</span>, <span class="number">22</span>, <span class="number">113</span>, <span class="number">30</span>, <span class="number">135</span>, <span class="number">136</span>, <span class="number">212</span>, <span class="number">26</span>, <span class="number">111</span>, <span class="number">131</span>, <span class="number">31</span>, <span class="number">187</span>, <span class="number">131</span>, <span class="number">106</span>, <span class="number">71</span>, <span class="number">91</span>, <span class="number">235</span>, <span class="number">254</span>, <span class="number">43</span>, <span class="number">8</span>, <span class="number">52</span>, <span class="number">166</span>, <span class="number">83</span>, <span class="number">62</span>, <span class="number">151</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">250</span>, <span class="number">97</span>, <span class="number">202</span>, <span class="number">131</span>, <span class="number">236</span>, <span class="number">159</span>, <span class="number">172</span>, <span class="number">40</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">192</span>, <span class="number">62</span>, <span class="number">173</span>, <span class="number">26</span>, <span class="number">191</span>, <span class="number">168</span>, <span class="number">121</span>, <span class="number">115</span>, <span class="number">227</span>, <span class="number">37</span>, <span class="number">198</span>, <span class="number">87</span>, <span class="number">235</span>, <span class="number">204</span>, <span class="number">51</span>, <span class="number">45</span>, <span class="number">220</span>, <span class="number">155</span>, <span class="number">84</span>, <span class="number">104</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">212</span>, <span class="number">59</span>, <span class="number">175</span>, <span class="number">177</span>, <span class="number">104</span>, <span class="number">156</span>, <span class="number">119</span>, <span class="number">110</span>, <span class="number">195</span>, <span class="number">202</span>, <span class="number">217</span>, <span class="number">188</span>, <span class="number">160</span>, <span class="number">122</span>, <span class="number">51</span>, <span class="number">180</span>, <span class="number">239</span>, <span class="number">20</span>, <span class="number">133</span>, <span class="number">232</span>, <span class="number">58</span>, <span class="number">235</span>, <span class="number">166</span>, <span class="number">68</span>, <span class="number">38</span>, <span class="number">209</span>, <span class="number">4</span>, <span class="number">187</span>, <span class="number">209</span>, <span class="number">41</span>, <span class="number">133</span>, <span class="number">28</span>, <span class="number">230</span>, <span class="number">60</span>, <span class="number">234</span>, <span class="number">69</span>, <span class="number">194</span>, <span class="number">213</span>, <span class="number">214</span>, <span class="number">14</span>, <span class="number">206</span>, <span class="number">241</span>, <span class="number">60</span>, <span class="number">239</span>, <span class="number">167</span>, <span class="number">126</span>, <span class="number">216</span>, <span class="number">175</span>, <span class="number">184</span>, <span class="number">138</span>, <span class="number">229</span>, <span class="number">125</span>, <span class="number">254</span>, <span class="number">30</span>, <span class="number">50</span>, <span class="number">122</span>, <span class="number">24</span>, <span class="number">4</span>, <span class="number">150</span>, <span class="number">33</span>, <span class="number">139</span>, <span class="number">127</span>, <span class="number">65</span>, <span class="number">58</span>, <span class="number">104</span>, <span class="number">102</span>, <span class="number">80</span>, <span class="number">76</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">25</span>, <span class="number">65</span>, <span class="number">14</span>, <span class="number">61</span>, <span class="number">58</span>, <span class="number">101</span>, <span class="number">30</span>, <span class="number">94</span>, <span class="number">205</span>, <span class="number">242</span>, <span class="number">78</span>, <span class="number">63</span>, <span class="number">124</span>, <span class="number">163</span>, <span class="number">60</span>, <span class="number">45</span>, <span class="number">85</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">78</span>, <span class="number">74</span>, <span class="number">215</span>, <span class="number">49</span>, <span class="number">147</span>, <span class="number">80</span>, <span class="number">138</span>, <span class="number">185</span>, <span class="number">30</span>, <span class="number">43</span>, <span class="number">169</span>, <span class="number">157</span>, <span class="number">223</span>, <span class="number">169</span>, <span class="number">77</span>, <span class="number">131</span>, <span class="number">97</span>, <span class="number">151</span>, <span class="number">75</span>, <span class="number">147</span>, <span class="number">251</span>, <span class="number">99</span>, <span class="number">23</span>, <span class="number">251</span>, <span class="number">32</span>, <span class="number">19</span>, <span class="number">122</span>, <span class="number">166</span>, <span class="number">209</span>, <span class="number">129</span>, <span class="number">120</span>, <span class="number">90</span>, <span class="number">204</span>, <span class="number">165</span>, <span class="number">28</span>, <span class="number">51</span>, <span class="number">79</span>, <span class="number">104</span>, <span class="number">19</span>, <span class="number">31</span>, <span class="number">75</span>, <span class="number">111</span>, <span class="number">167</span>, <span class="number">37</span>, <span class="number">201</span>, <span class="number">35</span>, <span class="number">248</span>, <span class="number">120</span>, <span class="number">215</span>, <span class="number">234</span>, <span class="number">80</span>, <span class="number">82</span>, <span class="number">255</span>, <span class="number">2</span>, <span class="number">92</span>, <span class="number">64</span>, <span class="number">105</span>, <span class="number">3</span>, <span class="number">93</span>, <span class="number">22</span>, <span class="number">39</span>, <span class="number">1</span>, <span class="number">139</span>, <span class="number">231</span>, <span class="number">71</span>, <span class="number">46</span>, <span class="number">214</span>, <span class="number">24</span>, <span class="number">67</span>, <span class="number">22</span>, <span class="number">230</span>, <span class="number">3</span>, <span class="number">213</span>, <span class="number">188</span>, <span class="number">20</span>, <span class="number">110</span>, <span class="number">180</span>, <span class="number">122</span>, <span class="number">237</span>, <span class="number">48</span>, <span class="number">132</span>, <span class="number">184</span>, <span class="number">238</span>, <span class="number">205</span>, <span class="number">40</span>, <span class="number">177</span>, <span class="number">198</span>, <span class="number">29</span>, <span class="number">201</span>, <span class="number">88</span>, <span class="number">100</span>, <span class="number">102</span>, <span class="number">253</span>, <span class="number">178</span>, <span class="number">56</span>, <span class="number">201</span>, <span class="number">223</span>, <span class="number">156</span>, <span class="number">105</span>, <span class="number">251</span>, <span class="number">137</span>, <span class="number">234</span>, <span class="number">121</span>, <span class="number">171</span>, <span class="number">236</span>, <span class="number">154</span>, <span class="number">232</span>, <span class="number">228</span>, <span class="number">203</span>, <span class="number">35</span>, <span class="number">131</span>, <span class="number">230</span>, <span class="number">83</span>, <span class="number">185</span>, <span class="number">250</span>, <span class="number">68</span>, <span class="number">200</span>, <span class="number">192</span>, <span class="number">93</span>, <span class="number">101</span>, <span class="number">223</span>, <span class="number">191</span>, <span class="number">77</span>, <span class="number">130</span>, <span class="number">122</span>, <span class="number">205</span>, <span class="number">18</span>, <span class="number">100</span>, <span class="number">135</span>, <span class="number">199</span>, <span class="number">68</span>, <span class="number">22</span>, <span class="number">236</span>, <span class="number">63</span>, <span class="number">81</span>, <span class="number">2</span>, <span class="number">154</span>, <span class="number">210</span>, <span class="number">222</span>, <span class="number">127</span>, <span class="number">18</span>, <span class="number">113</span>, <span class="number">32</span>, <span class="number">114</span>, <span class="number">18</span>, <span class="number">114</span>, <span class="number">205</span>, <span class="number">1</span>, <span class="number">140</span>, <span class="number">82</span>, <span class="number">178</span>, <span class="number">180</span>, <span class="number">226</span>, <span class="number">71</span>, <span class="number">165</span>, <span class="number">91</span>, <span class="number">57</span>, <span class="number">246</span>, <span class="number">111</span>, <span class="number">169</span>, <span class="number">97</span>, <span class="number">45</span>, <span class="number">194</span>, <span class="number">116</span>, <span class="number">127</span>, <span class="number">232</span>, <span class="number">124</span>, <span class="number">11</span>, <span class="number">69</span>, <span class="number">71</span>, <span class="number">17</span>, <span class="number">26</span>, <span class="number">4</span>, <span class="number">50</span>, <span class="number">241</span>, <span class="number">18</span>, <span class="number">39</span>, <span class="number">116</span>, <span class="number">81</span>, <span class="number">70</span>, <span class="number">72</span>, <span class="number">109</span>, <span class="number">26</span>, <span class="number">134</span>, <span class="number">206</span>, <span class="number">15</span>, <span class="number">241</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">97</span>, <span class="number">16</span>, <span class="number">133</span>, <span class="number">176</span>, <span class="number">96</span>, <span class="number">247</span>, <span class="number">184</span>, <span class="number">228</span>, <span class="number">238</span>, <span class="number">189</span>, <span class="number">177</span>, <span class="number">80</span>, <span class="number">103</span>, <span class="number">73</span>, <span class="number">2</span>, <span class="number">102</span>, <span class="number">232</span>, <span class="number">152</span>, <span class="number">93</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">190</span>, <span class="number">127</span>, <span class="number">157</span>, <span class="number">39</span>, <span class="number">138</span>, <span class="number">91</span>, <span class="number">13</span>, <span class="number">150</span>, <span class="number">252</span>, <span class="number">49</span>, <span class="number">193</span>, <span class="number">212</span>, <span class="number">145</span>, <span class="number">209</span>, <span class="number">180</span>, <span class="number">21</span>, <span class="number">88</span>, <span class="number">140</span>, <span class="number">233</span>, <span class="number">8</span>, <span class="number">113</span>, <span class="number">236</span>, <span class="number">2</span>, <span class="number">118</span>, <span class="number">141</span>, <span class="number">204</span>, <span class="number">110</span>, <span class="number">209</span>, <span class="number">36</span>, <span class="number">229</span>, <span class="number">212</span>, <span class="number">149</span>, <span class="number">76</span>, <span class="number">110</span>, <span class="number">57</span>, <span class="number">166</span>, <span class="number">196</span>, <span class="number">22</span>, <span class="number">16</span>, <span class="number">207</span>, <span class="number">98</span>, <span class="number">77</span>, <span class="number">40</span>, <span class="number">156</span>, <span class="number">117</span>, <span class="number">192</span>, <span class="number">120</span>, <span class="number">203</span>, <span class="number">174</span>, <span class="number">49</span>, <span class="number">251</span>, <span class="number">25</span>, <span class="number">197</span>, <span class="number">140</span>, <span class="number">9</span>, <span class="number">156</span>, <span class="number">203</span>, <span class="number">37</span>, <span class="number">21</span>, <span class="number">76</span>, <span class="number">100</span>, <span class="number">184</span>, <span class="number">201</span>, <span class="number">240</span>, <span class="number">36</span>, <span class="number">214</span>, <span class="number">236</span>, <span class="number">38</span>, <span class="number">183</span>, <span class="number">167</span>, <span class="number">27</span>, <span class="number">125</span>, <span class="number">150</span>, <span class="number">245</span>, <span class="number">186</span>, <span class="number">248</span>, <span class="number">163</span>, <span class="number">192</span>, <span class="number">236</span>, <span class="number">107</span>, <span class="number">237</span>, <span class="number">104</span>, <span class="number">31</span>, <span class="number">0</span>, <span class="number">46</span>, <span class="number">231</span>, <span class="number">137</span>, <span class="number">38</span>, <span class="number">161</span>, <span class="number">73</span>, <span class="number">44</span>, <span class="number">235</span>, <span class="number">239</span>, <span class="number">187</span>, <span class="number">145</span>, <span class="number">212</span>, <span class="number">110</span>, <span class="number">84</span>, <span class="number">37</span>, <span class="number">159</span>, <span class="number">51</span>, <span class="number">155</span>, <span class="number">137</span>, <span class="number">197</span>, <span class="number">175</span>, <span class="number">118</span>, <span class="number">225</span>, <span class="number">142</span>, <span class="number">77</span>, <span class="number">36</span>, <span class="number">71</span>, <span class="number">198</span>, <span class="number">132</span>, <span class="number">27</span>, <span class="number">209</span>, <span class="number">207</span>, <span class="number">168</span>, <span class="number">57</span>, <span class="number">70</span>, <span class="number">11</span>, <span class="number">120</span>, <span class="number">22</span>, <span class="number">115</span>, <span class="number">96</span>, <span class="number">201</span>, <span class="number">160</span>, <span class="number">229</span>, <span class="number">95</span>, <span class="number">248</span>, <span class="number">182</span>, <span class="number">43</span>, <span class="number">24</span>, <span class="number">60</span>, <span class="number">102</span>, <span class="number">119</span>, <span class="number">13</span>, <span class="number">159</span>, <span class="number">30</span>, <span class="number">111</span>, <span class="number">254</span>, <span class="number">195</span>, <span class="number">65</span>, <span class="number">97</span>, <span class="number">111</span>, <span class="number">161</span>, <span class="number">140</span>, <span class="number">45</span>, <span class="number">160</span>, <span class="number">87</span>, <span class="number">106</span>, <span class="number">195</span>, <span class="number">50</span>, <span class="number">131</span>, <span class="number">54</span>, <span class="number">126</span>, <span class="number">60</span>, <span class="number">232</span>, <span class="number">29</span>, <span class="number">54</span>, <span class="number">76</span>, <span class="number">68</span>, <span class="number">99</span>, <span class="number">45</span>, <span class="number">107</span>, <span class="number">56</span>, <span class="number">238</span>, <span class="number">187</span>, <span class="number">148</span>, <span class="number">246</span>, <span class="number">83</span>, <span class="number">42</span>, <span class="number">69</span>, <span class="number">225</span>, <span class="number">248</span>, <span class="number">162</span>, <span class="number">17</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">47</span>, <span class="number">249</span>, <span class="number">148</span>, <span class="number">150</span>, <span class="number">32</span>, <span class="number">158</span>, <span class="number">137</span>, <span class="number">110</span>, <span class="number">3</span>, <span class="number">218</span>, <span class="number">80</span>, <span class="number">13</span>, <span class="number">121</span>, <span class="number">22</span>, <span class="number">227</span>, <span class="number">113</span>, <span class="number">241</span>, <span class="number">154</span>, <span class="number">238</span>, <span class="number">191</span>, <span class="number">10</span>, <span class="number">247</span>, <span class="number">126</span>, <span class="number">59</span>, <span class="number">232</span>, <span class="number">251</span>, <span class="number">162</span>, <span class="number">49</span>, <span class="number">151</span>, <span class="number">109</span>, <span class="number">18</span>, <span class="number">204</span>, <span class="number">1</span>, <span class="number">101</span>, <span class="number">173</span>, <span class="number">129</span>, <span class="number">112</span>, <span class="number">236</span>, <span class="number">75</span>, <span class="number">73</span>, <span class="number">214</span>, <span class="number">98</span>, <span class="number">211</span>, <span class="number">216</span>, <span class="number">228</span>, <span class="number">4</span>, <span class="number">100</span>, <span class="number">67</span>, <span class="number">114</span>, <span class="number">143</span>, <span class="number">62</span>, <span class="number">212</span>, <span class="number">214</span>, <span class="number">124</span>, <span class="number">167</span>, <span class="number">189</span>, <span class="number">136</span>, <span class="number">161</span>, <span class="number">228</span>, <span class="number">56</span>, <span class="number">77</span>, <span class="number">165</span>, <span class="number">76</span>, <span class="number">222</span>, <span class="number">111</span>, <span class="number">138</span>, <span class="number">184</span>, <span class="number">163</span>, <span class="number">98</span>, <span class="number">113</span>, <span class="number">103</span>, <span class="number">19</span>, <span class="number">74</span>, <span class="number">59</span>, <span class="number">233</span>, <span class="number">199</span>, <span class="number">242</span>, <span class="number">151</span>, <span class="number">129</span>, <span class="number">51</span>, <span class="number">15</span>, <span class="number">60</span>, <span class="number">102</span>, <span class="number">237</span>, <span class="number">134</span>, <span class="number">205</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">212</span>, <span class="number">57</span>, <span class="number">13</span>, <span class="number">167</span>, <span class="number">193</span>, <span class="number">171</span>, <span class="number">80</span>, <span class="number">133</span>, <span class="number">193</span>, <span class="number">46</span>, <span class="number">186</span>, <span class="number">251</span>, <span class="number">157</span>, <span class="number">222</span>, <span class="number">169</span>, <span class="number">201</span>, <span class="number">160</span>, <span class="number">44</span>, <span class="number">185</span>, <span class="number">123</span>, <span class="number">129</span>, <span class="number">215</span>, <span class="number">72</span>, <span class="number">251</span>, <span class="number">250</span>, <span class="number">211</span>, <span class="number">242</span>, <span class="number">92</span>, <span class="number">83</span>, <span class="number">142</span>, <span class="number">98</span>, <span class="number">116</span>, <span class="number">189</span>, <span class="number">184</span>, <span class="number">95</span>, <span class="number">167</span>, <span class="number">138</span>, <span class="number">238</span>, <span class="number">125</span>, <span class="number">169</span>, <span class="number">137</span>, <span class="number">124</span>, <span class="number">60</span>, <span class="number">33</span>, <span class="number">234</span>, <span class="number">161</span>, <span class="number">206</span>, <span class="number">143</span>, <span class="number">15</span>, <span class="number">31</span>, <span class="number">180</span>, <span class="number">54</span>, <span class="number">185</span>, <span class="number">130</span>, <span class="number">77</span>, <span class="number">252</span>, <span class="number">237</span>, <span class="number">37</span>, <span class="number">180</span>, <span class="number">218</span>, <span class="number">240</span>, <span class="number">17</span>, <span class="number">43</span>, <span class="number">189</span>, <span class="number">184</span>, <span class="number">238</span>, <span class="number">234</span>, <span class="number">154</span>, <span class="number">166</span>, <span class="number">68</span>, <span class="number">204</span>, <span class="number">164</span>, <span class="number">209</span>, <span class="number">72</span>, <span class="number">212</span>, <span class="number">17</span>, <span class="number">24</span>, <span class="number">123</span>, <span class="number">46</span>, <span class="number">117</span>, <span class="number">132</span>, <span class="number">87</span>, <span class="number">125</span>, <span class="number">27</span>, <span class="number">204</span>, <span class="number">190</span>, <span class="number">12</span>, <span class="number">187</span>, <span class="number">85</span>, <span class="number">202</span>, <span class="number">159</span>, <span class="number">86</span>, <span class="number">41</span>, <span class="number">205</span>, <span class="number">52</span>, <span class="number">238</span>, <span class="number">208</span>, <span class="number">88</span>, <span class="number">122</span>, <span class="number">46</span>, <span class="number">139</span>, <span class="number">252</span>, <span class="number">72</span>, <span class="number">163</span>, <span class="number">162</span>, <span class="number">156</span>, <span class="number">125</span>, <span class="number">91</span>, <span class="number">154</span>]</span><br><span class="line"> </span><br><span class="line">dir_arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>]</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_target</span><span class="params">()</span>:</span></span><br><span class="line">    target = []</span><br><span class="line">    <span class="comment"># init target</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">10</span>):</span><br><span class="line">        target.append([])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">10</span>):</span><br><span class="line">            target[i].append(i*<span class="number">10</span> + j)</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_traceback</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="comment">#print '----'    </span></span><br><span class="line">    target = make_target()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1000</span>):</span><br><span class="line">        v7 = dir_array[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">4</span>):</span><br><span class="line">            v8 = (v7 &gt;&gt; ((<span class="number">3</span> - j) * <span class="number">2</span>)) &amp; <span class="number">3</span></span><br><span class="line">            v9 = <span class="number">5</span> - v8</span><br><span class="line">            <span class="keyword">if</span> v8 &lt; <span class="number">2</span>: v9 = <span class="number">1</span> - v8</span><br><span class="line">            last_x = x - dir_arr[v9 * <span class="number">2</span>]</span><br><span class="line">            last_y = y - dir_arr[v9 * <span class="number">2</span> + <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> last_x &lt; <span class="number">0</span> <span class="keyword">or</span> last_x &gt;= <span class="number">10</span> <span class="keyword">or</span> last_y &lt; <span class="number">0</span> <span class="keyword">or</span> last_y &gt;= <span class="number">10</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            <span class="comment"># swap</span></span><br><span class="line">            tmp = target[last_x][last_y]</span><br><span class="line">            target[last_x][last_y] = target[x][y]</span><br><span class="line">            target[x][y] = tmp</span><br><span class="line">            x = last_x</span><br><span class="line">            y = last_y</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span> target[x][y] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'No'</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_start</span><span class="params">(target)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> target[i][j] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> i, j</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">"No zero in matrix"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_run</span><span class="params">(target, x, y)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>)[::<span class="number">-1</span>]:</span><br><span class="line">        v7 = dir_array[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">4</span>):</span><br><span class="line">            v8 = v7 &amp; <span class="number">3</span></span><br><span class="line">            v7 = v7 &gt;&gt; <span class="number">2</span></span><br><span class="line">            v9 = <span class="number">5</span> - v8</span><br><span class="line">            <span class="keyword">if</span> v8 &lt; <span class="number">2</span>: v9 = <span class="number">1</span> - v8</span><br><span class="line">            next_x = x + dir_arr[v9*<span class="number">2</span>]</span><br><span class="line">            next_y = y + dir_arr[v9*<span class="number">2</span>+<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> next_x &gt;= <span class="number">10</span> <span class="keyword">or</span> next_x &lt; <span class="number">0</span> <span class="keyword">or</span> next_y &gt;= <span class="number">10</span> <span class="keyword">or</span> next_y &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            tmp = target[next_x][next_y]</span><br><span class="line">            target[next_x][next_y] = target[x][y]</span><br><span class="line">            target[x][y] = tmp</span><br><span class="line">            x = next_x</span><br><span class="line">            y = next_y</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> target[i][j] != i * <span class="number">10</span> + j:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> xrange(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> xrange(<span class="number">10</span>):</span><br><span class="line">        result = do_traceback(k, l)</span><br><span class="line">        <span class="keyword">if</span> result:</span><br><span class="line">            <span class="keyword">print</span> result</span><br><span class="line">            backup = copy.deepcopy(result)</span><br><span class="line">            x, y = find_start(result)</span><br><span class="line">            <span class="keyword">if</span> do_run(result, x, y) == <span class="literal">True</span>:</span><br><span class="line">                encoded = <span class="string">''</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">10</span>):</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">10</span>):</span><br><span class="line">                        hi = backup[i][j] / <span class="number">0x10</span></span><br><span class="line">                        lo = backup[i][j] % <span class="number">0x10</span></span><br><span class="line">                        encoded += string.ascii_uppercase[hi]</span><br><span class="line">                        encoded += string.ascii_uppercase[lo]</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">print</span> encoded</span><br></pre></td></tr></table></figure>
<p><img data-src="3_2_2.png" alt="3_2_2" /><br />
嗯……就这样吧……虽然操作步骤看懂了，但是到现在都没明白用户输入是在那个函数里处理的。难受。<br />
<code>CEBGAMBEBHDBBNCPBKBLABADCCACBIBFEOCGAOBCEGCACIEAAPBDBMCNBABBDJANCMAIAFDMAECHDACBDDCJFPBOALDHEEDGBPCFEHEIBJDLFNAGAJDKFIFHAKECEJCDAHDNEPFJFGGBDOFADCCKFDDIEDELEMCOFLFCFBDPFMCLFFGCGDENFKAADEDFFOEBEKFEEFGA</code></p>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
        <tag>reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Exploit Development - Part 1: The Basics(转载)</title>
    <url>/Windows-Exploit/Windows-Exploit-Development-Part-1-The-Basics-%E8%BD%AC%E8%BD%BD/</url>
    <content><![CDATA[<blockquote>
<p>从今天开始转载Windows Exploit教程，也是为了试一试自己的翻译能力，可能有些地方翻译的不是很准确，希望评论告诉我</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>原链接如下：</p>
</blockquote>
<p><a href="https://www.securitysift.com/windows-exploit-development-part-1-basics/" target="_blank" rel="noopener">Windows Exploit Development – Part 1: The Basics</a></p>
<hr />
<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1>
<p>欢迎阅读Windows漏洞利用开发系列文章的第一部分。在第一部分中，我将仅介绍了解未来帖子内容所需的基础知识，包括一些汇编语法，Windows内存布局和使用调试器。这不是对这些主题的全面讨论，所以如果你没有接触过汇编或者在你阅读过第一篇文章后如果你对某些地方不清楚，我鼓励你去看一看我提供的多样的资源链接。</p>
<p>我对本系列其他部分的计划是涉及各类的的漏洞利用方面，从简单的（直接的EIP覆写）到更复杂的（Unicode，egg hunters，ASLR绕过，堆喷射，设备驱动漏洞利用等），使用实际的漏洞利用来证明每一个主题。我真的看不到结尾，所以当我想到更多的话题时，我会继续写文章。</p>
<h1 id="目的"><a class="markdownIt-Anchor" href="#目的"></a> 目的</h1>
<p>我这一系列文章的目标是介绍查找和编写Windows应用程序漏洞的概念，希望没有太多技术知识的安全和IT专业人员对软件安全感兴趣，并应用他们的技能使私有和公共域软件更安全。免责声明：如果你想利用他人参与非法或不道德的活动，请去其他地方。</p>
<p>我还应该提到，这些帖子并不打算与其他优秀的教程竞争，比如<a href="https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/" target="_blank" rel="noopener">Corelan Team</a>, <a href="http://www.thegreycorner.com/" target="_blank" rel="noopener">The Grey Corner</a>, 和<a href="http://www.fuzzysecurity.com/tutorials.html" target="_blank" rel="noopener">Fuzzy Security</a>。相反，它们是为了补充它们，并为解释和示例提供另一种资源——如果你像我一样，你永远不会有太多的示例。我强烈建议你去看看其他的好网站。</p>
<h1 id="你需要什么"><a class="markdownIt-Anchor" href="#你需要什么"></a> 你需要什么</h1>
<p>如果你想跟进，以下是你需要的：</p>
<ul>
<li>Windows安装：我计划从Windows XP SP3开始，但随着我的进展和涉及不同的主题/漏洞利用，我也可以使用其他版本，包括Windows 7和Windows Server 2003/2008。</li>
<li>调试器：在Windows主机上，您还需要一个调试器。我将主要使用Immunity Debugger，您可以在<a href="http://debugger.immunityinc.com/ID_register.py" target="_blank" rel="noopener">这里</a>下载。您还应该获得Mona插件，可以在<a href="https://bbs.pediy.com/thread-194212.htm" target="_blank" rel="noopener">这里</a>找到。我还将在一些示例中使用WinDbg。可在[此处](<a href="http://msdn.microsoft.com/en-us/library/windows/hardware/ff551063(v=vs.85%29.aspx)%E6%89%BE%E5%88%B0%E4%B8%8B%E8%BD%BD%E8%AF%B4%E6%98%8E%EF%BC%88%E5%90%91%E4%B8%8B%E6%BB%9A%E5%8A%A8%E9%A1%B5%E9%9D%A2%E6%9F%A5%E7%9C%8B%E6%97%A9%E6%9C%9F%E7%89%88%E6%9C%AC%E7%9A%84Windows%EF%BC%89" target="_blank" rel="noopener">http://msdn.microsoft.com/en-us/library/windows/hardware/ff551063(v=vs.85).aspx)找到下载说明（向下滚动页面查看早期版本的Windows）</a></li>
</ul>
<blockquote>
<p>mona插件的原帖地址已经找不到了，我就把链接换成的看雪的。安装Immunity Debugger需要Python2.7.1的环境，当主机未安装的时候会自动开始安装。</p>
</blockquote>
<ul>
<li>一个Backtrack/Kali主机（可选）:我在所有脚本中都使用Kali主机，并且计划在我使用的任何远程攻击示例中将其用作“攻击机器”。我计划对大多数脚本使用Perl和Python，因此您可以选择在Windows主机上安装任意一种语言环境。</li>
</ul>
<h1 id="immunity-debugger入门"><a class="markdownIt-Anchor" href="#immunity-debugger入门"></a> Immunity Debugger入门</h1>
<p>让我们先看一看调试器，因为在这些教程中我们将花费大量时间使用它。我将主要使用Immunity Debugger，因为它是免费的，并且有一些插件和自定义脚本功能，我计划随着我们的进展突出显示这些功能。</p>
<p>我将使用Windows Media Player作为示例程序来引入Immunity Debugger。如果要继续，请打开Windows Media Player和Immunity Debugger。在Immunity Debugger中，点击File-&gt;Attach，选择应用或者进程的名字（在我的实例中，是wmplayer）。注意：你也可以通过单击File-&gt;Open并且选择可执行文件直接启动WMP。</p>
<p><img data-src="process_attach.jpg" alt="process_attach" /><br />
一旦您在Immunity中启动了一个可执行文件或链接到一个进程，您应该被带到CPU视图（如果没有，请点击Alt+C），它看起来如下：<br />
<img data-src="CPU_window.png" alt="CPU_window" /><br />
当你使用Immunity运行/链接到一个程序时，它会在暂停状态下启动（见右下角）。要运行程序，您可以按F9（或工具栏中的“开始”按钮）。要进入下一条指令（但暂停程序执行流程），请按F7。您可以使用F7一步一步地完成每个指令。如果要在任何时候重新启动程序，请按Ctrl+F2。我不会提供一个关于如何使用Immunity的完整教程，但是我会在本文和将来的文章中介绍新概念时，尝试提及任何相关的快捷方式和热键。</p>
<p>如您所见，CPU窗口分为四个窗格，描述以下信息：</p>
<ol>
<li>CPU指令——显示内存地址、操作码和汇编指令、附加注释、函数名以及与CPU指令相关的其他信息。</li>
<li>寄存器——显示与应用程序当前状态相关联的通用寄存器、指令指针和标志的内容。</li>
<li>堆栈——显示当前堆栈的内容。</li>
<li>内存转储——显示应用程序内存的内容。</li>
</ol>
<p>让我们从寄存器开始，更深入地了解每一个。</p>
<h2 id="cpu寄存器"><a class="markdownIt-Anchor" href="#cpu寄存器"></a> CPU寄存器</h2>
<p>CPU寄存器用作用于快速访问数据的小存储区域。在x86（32位）体系结构中，有8个通用寄存器：eax、ebx、ecx、edx、edi、esi、ebp和esp。技术上，它们可以用于存储任何数据，尽管它们最初是为执行特定任务而设计的，而且在许多情况下，现在仍然以这种方式使用。<br />
<img data-src="registers.png" alt="registers" /><br />
以下是每个的详细信息……</p>
<h3 id="eax累加器寄存器"><a class="markdownIt-Anchor" href="#eax累加器寄存器"></a> EAX——累加器寄存器</h3>
<p>它之所以被称为累加器寄存器，是因为它是用于普通计算（如add和sub）的主寄存器。虽然其他寄存器可用于计算，但EAX通过分配更高效的单字节操作码而获得了优先状态。当涉及到为有限的可用缓冲区空间编写利用shellcode时，这种效率可能非常重要（在未来的教程中将详细介绍！）。除了在计算中使用之外，EAX还用于存储函数的返回值。</p>
<p>本通用寄存器可全部或部分参考如下：EAX是指32位寄存器的整体。AX指最低有效16位，可进一步分解为AH（ax的8个最高有效位）和AL（8个最低有效位）。</p>
<p>下面是一个基本的视觉表示：<br />
<img data-src="EAX.png" alt="EAX" /><br />
同样的全部/部分32位、16位和8位引用也适用于接下来的三个寄存器（EBX、ECX和EDX）。</p>
<h3 id="ebx基址寄存器"><a class="markdownIt-Anchor" href="#ebx基址寄存器"></a> EBX——基址寄存器</h3>
<p>在32位体系结构中，EBX实际上没有特殊的用途，因此只需将其视为可用存储的全部捕获。与EAX一样，它可以被整体（EBX）或部分（BX、BH、BL）引用。</p>
<h3 id="ecx计数器寄存器"><a class="markdownIt-Anchor" href="#ecx计数器寄存器"></a> ECX——计数器寄存器</h3>
<p>顾名思义，计数器（或计数）寄存器经常被用作循环和函数重复计数器，尽管它也可以用来存储任何数据。与EAX一样，它可以被整个（ECX）或部分（CX、CH、CL）引用。</p>
<h3 id="edx数据寄存器"><a class="markdownIt-Anchor" href="#edx数据寄存器"></a> EDX——数据寄存器</h3>
<p>EDX有点像EAX的伙伴寄存器。它通常用于数学运算，如除法和乘法，以处理溢出，其中最重要的位存储在EDX中，而最不重要的位存储在EAX中。它也常用于存储函数变量。与EAX一样，它可以全部（EDX）或部分（DX、DH、DL）引用。</p>
<h3 id="esi资源索引"><a class="markdownIt-Anchor" href="#esi资源索引"></a> ESI——资源索引</h3>
<p>与EDI对应，ESI通常用于存储指向读取位置的指针。例如，如果一个函数被设计为读取一个字符串，那么ESI将保存指向该字符串位置的指针。</p>
<h3 id="edi目标索引"><a class="markdownIt-Anchor" href="#edi目标索引"></a> EDI——目标索引</h3>
<p>尽管它可以（也可以）用于一般数据存储，但EDI主要设计用于存储函数的存储指针，例如字符串操作的写入地址。</p>
<h3 id="ebp基底指针"><a class="markdownIt-Anchor" href="#ebp基底指针"></a> EBP——基底指针</h3>
<p>EBP用于跟踪堆栈的底部/底部。它通常用于通过使用EBP当前值的偏移量来引用位于堆栈上的变量，但是如果参数仅由寄存器引用，则可以选择将EBP用于一般用途。</p>
<h3 id="esp栈指针"><a class="markdownIt-Anchor" href="#esp栈指针"></a> ESP——栈指针</h3>
<p>ESP用于跟踪堆栈顶部。在所有的通用寄存器中，ESP很少用于或从未用于除预期用途以外的其它用途。</p>
<h3 id="指令指针eip"><a class="markdownIt-Anchor" href="#指令指针eip"></a> 指令指针（EIP）</h3>
<p>EIP不是一个通用寄存器，但是适合在这里介绍，EIP指向CPU要执行的下一条指令的内存地址。正如您将在接下来的教程中看到的，控制EIP的值，您可以控制应用程序的执行流（执行您选择的代码）。</p>
<h3 id="段寄存器和eflags寄存器"><a class="markdownIt-Anchor" href="#段寄存器和eflags寄存器"></a> 段寄存器和EFLAGS寄存器</h3>
<p><img data-src="EFLAGS.png" alt="EFLAGS" /><br />
您将在“寄存器”窗格中看到另外两个寄存器：段寄存器和EFLAGS寄存器。我也不会详细介绍，但请注意，eflags寄存器由一系列标志组成，这些标志表示计算和比较产生的布尔值，可用于确定何时/是否进行条件跳转（稍后将详细介绍）。</p>
<p>有关CPU寄存器的更多信息，请查看以下资源：</p>
<ul>
<li><a href="http://wiki.skullsecurity.org/Registers" target="_blank" rel="noopener">http://wiki.skullsecurity.org/Registers </a></li>
<li><a href="http://www.swansontec.com/sregisters.html" target="_blank" rel="noopener">http://www.swansontec.com/sregisters.html</a></li>
</ul>
<h2 id="内存转储"><a class="markdownIt-Anchor" href="#内存转储"></a> 内存转储</h2>
<p>跳到CPU视图的内存转储窗格，您只需在这里查看内存位置的内容。例如，假设您想查看ESP的内存内容，下面的屏幕截图指向0007ff0c。右键单击ESP，选择“Follow in Dump”，内存转储窗格将显示该位置。<br />
<img data-src="memory_dump.png" alt="memory_dump" /></p>
<h2 id="cpu指令"><a class="markdownIt-Anchor" href="#cpu指令"></a> CPU指令</h2>
<p>正如你可能知道的，现在的大多数应用程序都是用高级语言（C，C++等）编写的。在编译应用程序时，这些高级语言指令被翻译成具有相应操作码的汇编，以帮助进一步将指令翻译成机器可以理解的东西（机器代码）。在调试器中，您可以在CPU指令窗格中查看CPU正在处理的每个汇编指令（以及相应的操作码）。注意：对于Windows漏洞攻击系列，我将使用x86汇编语言Intel语法（<a href="http://en.wikipedia.org/wiki/x86_assembly_language_syntax" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/x86_assembly_language_syntax</a>）。</p>
<p>您可以单步执行程序的执行流程（F7），并查看每个CPU指令的结果。让我们看一下Windows Media Player的第一组说明。程序启动暂停。按F7几次以执行前几条指令，直到到达第二条MOV DWORD PTR SS:指令（在下面的屏幕截图中突出显示）。MOV指令将数据项从一个位置复制到另一个位置。<br />
<img data-src="Mov_Dword1-61.png" alt="Mov_Dword1-61" /></p>
<blockquote>
<p>作者电脑上的演示和自己的电脑可能略有不同，下不做赘述。</p>
</blockquote>
<p>此指令将把EBX的内容移动到EBP-18所指向的内存地址位置（记住使用x86 Intel语法它是mov[dst][src]）。请注意，EBP（堆栈基底指针）指向0007FFC0。使用Windows或Mac计算器（在科学/编程模式下），计算0007ffc0-0x18。结果应该是0x7FFA8，这意味着EBP的内容将被放在地址0007FFA8的位置。事实上，你不需要在Immunity之外计算。注意CPU指令窗格底部的子窗口，它已经告诉您EBX的值，以及0007FFC0–0x18的值以及该内存位置（F4C47D04）的当前内容。您可以右键单击该子窗口中的“Stack”行，然后选择“Follow address in Dump”以验证该内存位置的内容。<br />
<img data-src="Mov_Dword2-6.png" alt="Mov_Dword2-6" /><br />
现在再次按F7执行指令。注意内存位置0007FFA8现在的值是00000000，因为EBX的内容被移到了那里。<br />
<img data-src="Mov_Dword3-3.png" alt="Mov_Dword3-3" /><br />
这只是一个很快的例子，说明如何在Immunity内跟踪每个CPU指令的执行。下面是一些更常见的汇编说明和语法：</p>
<ul>
<li>ADD/SUB op1，op2——加或减两个操作数，结果存储在第一个操作数中。这些可以是寄存器、内存位置（限制为一个）或常量。例如，ADD EAX，10表示向EAX的值添加10，并将结果存储在EAX中。</li>
<li>XOR EAX，EAX——对寄存器执行“exclusive or”操作，本身将其值设置为零；清除寄存器内容的简单方法。</li>
<li>INC/DEC op1——将操作数的值递增或递减1。</li>
<li>CMP op1，op2——比较两个操作数（寄存器/内存地址/常量）的值，并设置适当的EFLAGS值。</li>
<li>跳转（JMP）和条件跳转（je、jz等）——顾名思义，这些指令允许您跳转到执行流/指令集中的另一个位置。JMP指令只是跳转到一个位置，而条件跳转（je、jz等）仅在满足某些条件时才执行（使用前面提到的EFLAGS寄存器值）。例如，如果两个寄存器的值相等（使用je指令和零标志（zf）=1），则可以比较两个寄存器的值并跳到某个位置。</li>
<li>当您在方括号中看到一个值，如ADD DWORD PTR [x]或MOV EAX，[EBX]时，它指的是存储在内存地址x的值。换句话说，EBX指的是EBX的内容，而[EBX]指的是存储在EBX内存地址的值。</li>
<li>相关大小关键字：字节=1字节，字=2字节，双字=4字节（BYTE = 1 byte, WORD = 2 bytes, DWORD = 4 bytes）。</li>
</ul>
<p>我当然不是专家，但是当涉及到理解并最终开发自己的漏洞代码时，您应该对汇编语言有一个非常扎实的掌握。随着我们的进展，我将讨论更多的汇编指令，但我不打算深入介绍汇编语言，因此，如果您需要复习，有大量优秀的在线资源，包括：</p>
<ul>
<li><a href="http://www.cs.virginia.edu/~evans/cs216/guides/x86.html" target="_blank" rel="noopener">x86 Assembly Guide</a></li>
<li><a href="http://www.sandpile.org/" target="_blank" rel="noopener">Sandpile.org</a></li>
</ul>
<blockquote>
<p>这里作者给出的链接有的失效了，我就不放了，个人推荐看一看王爽老师的《汇编语言》，很快就能入门。</p>
</blockquote>
<p>如果你想买一本书，你可以考虑买一本：<a href="https://www.amazon.com/Hacking-Art-Exploitation-Jon-Erickson-ebook/dp/B004OEJN3I" target="_blank" rel="noopener">Hacking: The Art of Exploitation: The Art of Exploitation</a>（有兴趣的同学可以看一看……不想找中文版的地址了），它不仅涵盖了汇编的基础知识，而且还涉及到编写漏洞利用（尽管主要是在Linux环境中）。对于这一系列的文章，我将尽我所能地解释我使用的任何代码示例，因此，如果您至少对汇编语言有一些基本的了解，那么您就可以了。</p>
<h2 id="windows内存布局"><a class="markdownIt-Anchor" href="#windows内存布局"></a> Windows内存布局</h2>
<p>在讨论堆栈之前，我想简单地讨论一下Win32进程内存布局。我应该预先声明，这将是一个非常笼统的介绍（啥叫high-level introduction……），不会涉及地址空间布局随机化（ASLR）等概念。虚拟到物理地址转换、分页、物理地址扩展等。我计划在后面的部分中介绍其中的一些主题，但现在我想让事情变得非常简单。</p>
<p>首先，用Immunity打开Windows Media Player后，按<code>ALT+M</code>查看内存映射（或者，您可以选择“View-&gt;Memory”或单击工具栏上的“M”图标）。<br />
您应该看到如下内容（具体条目可能有所不同）：<br />
<img data-src="memory_map_immunity.png" alt="memory_map_immunity" /><br />
这是wmplayer.exe的内存布局，包括堆栈、堆、加载的模块（DLLS）和可执行文件本身。我将使用corelan的<a href="https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/" target="_blank" rel="noopener">introductory tutorial on Stack Based Overflows</a>中的微简化版内存映射图更详细地介绍这些，我已经将Windows Media Player的内存布局映射到了Immunity的内存映射窗口。<br />
<img data-src="Screen-Shot-2013-11-30-at-1.35.49-PM.png" alt="Screen-Shot-2013-11-30-at-1.35.49-PM" /><br />
让我们从底部开始，从内存的一部分从<code>0xFFFFFFFF</code>到<code>0x7FFFFFFF</code>，这通常被称为“内核区”。</p>
<h3 id="内核区"><a class="markdownIt-Anchor" href="#内核区"></a> 内核区</h3>
<p>这部分内存由操作系统为设备驱动程序、系统缓存、分页/非分页池、HAL等保留。用户无法访问这部分内存。注意：有关Windows内存管理的详细说明，请参阅Windows内部手册（目前有两卷）。</p>
<h3 id="peb和teb"><a class="markdownIt-Anchor" href="#peb和teb"></a> PEB和TEB</h3>
]]></content>
      <categories>
        <category>Windows Exploit</category>
      </categories>
      <tags>
        <tag>Windows Exploit</tag>
      </tags>
  </entry>
  <entry>
    <title>win10&amp;deepin双系统搭建</title>
    <url>/environment/win10-deepin%E5%8F%8C%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>记录一下双系统搭建中出现的问题</p>
</blockquote>
<a id="more"></a>
<h1 id="win10磁盘分区"><a class="markdownIt-Anchor" href="#win10磁盘分区"></a> Win10磁盘分区</h1>
<p>我的电脑是128G SSD +1T 机械硬盘的组合，最初我试过将系统搭建在机械硬盘上，但是效果并不好（开机速度实在是太慢了），本次决定将系统搭建在两块硬盘上，详细的分区如下图（其实应该显示未分配空间，但是已经安装完了嘛……我也没法倒回去）：</p>
<p><img data-src="partition.png" alt="分区" /></p>
<blockquote>
<p><strong>分区之前切记备份数据！切记！</strong></p>
</blockquote>
<p>具体的分区事项百度一下就有，我就不多说了。下面说一点会出现的问题：</p>
<h2 id="c盘分区"><a class="markdownIt-Anchor" href="#c盘分区"></a> C盘分区</h2>
<p>在分区的时候，可能C盘会遇到一点点的小麻烦——发现明明剩余空间还很大，为什么分区的时候分不出那么多空间来呢？针对这个问题，我们有以下解决办法：</p>
<ol>
<li>查看 此电脑 -&gt; 属性 -&gt; 系统保护 -&gt; 关闭C盘保护。</li>
<li>因为C盘是系统盘，所以我们采用第三方的分区软件（例如分区助手）进行磁盘分区，由于我的Win10版本是1803，比较新，所以采用制作启动光盘的方式，制作微PE系统引导后再进行C盘分区（引导启动下面会提到）<br />
<img data-src="PA_Green.png" alt="第三方分区" /></li>
</ol>
<h2 id="引导启动"><a class="markdownIt-Anchor" href="#引导启动"></a> 引导启动</h2>
<p>不同牌子的电脑有不同的进入BIOS的方法，针对Win10系统，我们也有比较温和的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: 设置</span><br><span class="line">e&#x3D;&gt;end: UEFI固件设置</span><br><span class="line">op1&#x3D;&gt;operation: 更新和安全</span><br><span class="line">op2&#x3D;&gt;operation: 恢复</span><br><span class="line">op3&#x3D;&gt;operation: 高级启动</span><br><span class="line">op4&#x3D;&gt;operation: 疑难解答</span><br><span class="line"></span><br><span class="line">st-&gt;op1(right)-&gt;op2(right)-&gt;op3(right)-&gt;op4(right)-&gt;e(right)</span><br></pre></td></tr></table></figure>
<p>这样我们就可以安全地进入BIOS了，记得要关闭电源设置里的快速启动和BIOS的某个选项（绝对不是我忘了，绝对不是！）。</p>
<h1 id="制作启动盘并安装"><a class="markdownIt-Anchor" href="#制作启动盘并安装"></a> 制作启动盘并安装</h1>
<h2 id="制作启动盘"><a class="markdownIt-Anchor" href="#制作启动盘"></a> 制作启动盘</h2>
<p>因为deepin官方给了制作启动盘的工具，只要有一个还算大的U盘和deepin系统镜像就行了，如果不想用官方的启动盘制作器，也可以用<a href="https://dev.tencent.com/u/jygzyc/p/blog_photos/git/raw/master/downloads/rufus-3.1.exe" target="_blank" rel="noopener">Rufus</a>。</p>
<h2 id="安装系统"><a class="markdownIt-Anchor" href="#安装系统"></a> 安装系统</h2>
<p>按上面说的将优先启动项换为U盘，即可开始安装，至于分区嘛，因为我是为了加快速度的，所以就把根目录装在SSD，其余的分到机械硬盘上，具体分区的样子可以看上面那张图，凡是没有盘符有没有特殊标识的都是deepin的分区，之后谁有需要我再把详细图放上来吧。</p>
<h1 id="显卡驱动nvidia"><a class="markdownIt-Anchor" href="#显卡驱动nvidia"></a> <strong>显卡驱动（Nvidia）</strong></h1>
<blockquote>
<p>这里是最麻烦，也是最容易出问题的部分，我在这里参照了好多链接，最后才有了解决办法。<br />
参考链接(其他的记不住了)：</p>
<ul>
<li><a href="https://www.cnblogs.com/necp-zwl/p/7024074.html" target="_blank" rel="noopener">https://www.cnblogs.com/necp-zwl/p/7024074.html</a></li>
</ul>
</blockquote>
<h2 id="卡在logo界面"><a class="markdownIt-Anchor" href="#卡在logo界面"></a> 卡在logo界面</h2>
<p>这里我们<code>ctrl+alt+F3</code>进入文本模式，然后禁用开源的驱动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/modprobe.d/blacklist.deepin.conf</span><br><span class="line"><span class="comment"># 文末添加如下字段</span></span><br><span class="line">blacklist vga16fb</span><br><span class="line">blacklist nouveau</span><br><span class="line">blacklist rivafb</span><br><span class="line">blacklist rivatv</span><br><span class="line">blacklist nvidiafb</span><br><span class="line"><span class="comment"># :wq保存退出</span></span><br><span class="line">sudo upadte-initramfs -u <span class="comment">#没有这条命令的话就安装update-initramfs</span></span><br><span class="line">lsmod | grep nouveau <span class="comment">#无回显说明成功，有回显也不要慌，继续走</span></span><br></pre></td></tr></table></figure>
<p>这时我们再<code>ctrl+alt+F1</code>回到图形界面（不行的话就重启），应该是可以正常登陆了。</p>
<h2 id="安装nvidia驱动"><a class="markdownIt-Anchor" href="#安装nvidia驱动"></a> 安装Nvidia驱动</h2>
<p>深度系统自己有驱动管理器，选择闭源的那个安装，如果成功则说明你很幸运，要是安装失败了，我们走接下来的流程：</p>
<blockquote>
<p>参考链接：</p>
<ul>
<li><a href="http://blog.51cto.com/lidongni/2105254" target="_blank" rel="noopener">http://blog.51cto.com/lidongni/2105254</a></li>
<li><a href="https://blog.csdn.net/u012950413/article/details/80319126" target="_blank" rel="noopener">https://blog.csdn.net/u012950413/article/details/80319126</a></li>
<li><a href="https://blog.csdn.net/aaronjny/article/details/79330727" target="_blank" rel="noopener">https://blog.csdn.net/aaronjny/article/details/79330727</a></li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install nvidia-driver nvidia-smi</span><br><span class="line">nvidia-smi <span class="comment">#有显卡信息说明驱动安装完成</span></span><br></pre></td></tr></table></figure>
<h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1>
<p>目前就想到这么多的问题，如果之后再遇到的话再慢慢填坑（其实就是懒 -.-）</p>
]]></content>
      <categories>
        <category>environment</category>
      </categories>
      <tags>
        <tag>environment</tag>
      </tags>
  </entry>
  <entry>
    <title>十一月</title>
    <url>/article/%E5%8D%81%E4%B8%80%E6%9C%88/</url>
    <content><![CDATA[<blockquote>
<p>二十八日随笔</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>最后一缕红光即将消逝<br />
抬头，又是一片金色<br />
柔和的晚霞拥抱着她<br />
拾起一片扇叶，轻轻触摸<br />
时光将纹路刻在叶上<br />
又过去了一年，辛苦你了<br />
捧起又轻放<br />
轻浮水面，缓缓而漂，不知何方<br />
回过神来，早已置身怀中<br />
又是温暖的感觉<br />
“回家吧。”</p>
</blockquote>
]]></content>
      <categories>
        <category>article</category>
      </categories>
      <tags>
        <tag>life</tag>
        <tag>article</tag>
      </tags>
  </entry>
  <entry>
    <title>配置环境问题集</title>
    <url>/environment/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E9%97%AE%E9%A2%98%E9%9B%86/</url>
    <content><![CDATA[<h1 id="ubuntu"><a class="markdownIt-Anchor" href="#ubuntu"></a> Ubuntu</h1>
<h2 id="ubuntu-1604出现problem-executing-scripts-aptupdatepost-invoke-success-if-usrbintest-w-varcacheapp-info-a-e-usrbinappstreamcli-then-appstreamcli-refresh-devnull-fi"><a class="markdownIt-Anchor" href="#ubuntu-1604出现problem-executing-scripts-aptupdatepost-invoke-success-if-usrbintest-w-varcacheapp-info-a-e-usrbinappstreamcli-then-appstreamcli-refresh-devnull-fi"></a> Ubuntu 16.04出现：Problem executing scripts APT::Update::Post-Invoke-Success ‘if /usr/bin/test -w /var/cache/app-info -a -e /usr/bin/appstreamcli; then appstreamcli refresh &gt; /dev/null; fi’</h2>
<a id="more"></a>
<p>转自<a href="https://www.cnblogs.com/EasonJim/p/7343892.html" target="_blank" rel="noopener">https://www.cnblogs.com/EasonJim/p/7343892.html</a>，侵删。</p>
<blockquote>
<p>错误</p>
</blockquote>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">Reading package lists... Done</span><br><span class="line"><span class="keyword">E</span>: Problem executing scripts APT::<span class="keyword">Update</span>::<span class="keyword">Post</span>-Invoke-Success</span><br><span class="line">'<span class="keyword">if</span> /usr/bin/<span class="keyword">test</span> -w /<span class="keyword">var</span>/cache/<span class="keyword">app</span>-info -a -<span class="keyword">e</span> /usr/bin/appstreamcli;</span><br><span class="line"> then appstreamcli refresh &gt; /dev/null;</span><br><span class="line"> fi'</span><br><span class="line"><span class="keyword">E</span>: Sub-process returned <span class="keyword">an</span> <span class="keyword">error</span> code</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在运行sudo apt-get update时出现如上信息，解决方法如下：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pkill -KILL appstreamcli</span><br><span class="line">wget -P /tmp https://launchpad.net/ubuntu/+archive/primary/+files/appstream_0.9.4-1ubuntu1_amd64.deb https://launchpad.net/ubuntu/+archive/primary/+files/libappstream3_0.9.4-1ubuntu1_amd64.deb</span><br><span class="line">sudo dpkg -i /tmp/appstream_0.9.4-1ubuntu1_amd64.deb /tmp/libappstream3_0.9.4-1ubuntu1_amd64.deb</span><br></pre></td></tr></table></figure>
<p>执行完上述命令之后再次运行sudo apt-get update就不会再出现上面的错误。</p>
<hr />
<h2 id="appstream-cache-update-completed-but-some-metadata-was-ignored-due-to-errors"><a class="markdownIt-Anchor" href="#appstream-cache-update-completed-but-some-metadata-was-ignored-due-to-errors"></a> AppStream cache update completed, but some metadata was ignored due to errors.</h2>
<p>转自<a href="https://blog.csdn.net/tang05709/article/details/53609234" target="_blank" rel="noopener">https://blog.csdn.net/tang05709/article/details/53609234</a>，侵删。</p>
<blockquote>
<p>错误</p>
</blockquote>
<p>更新Ubuntu时出现AppStream cache update completed, but some metadata was ignored due to errors.</p>
<blockquote>
<p>解决方法</p>
</blockquote>
<p><code>sudo rm /var/lib/dpkg/lock</code></p>
<h2 id="开机时出现host-smbus-controller-not-enabled"><a class="markdownIt-Anchor" href="#开机时出现host-smbus-controller-not-enabled"></a> 开机时出现Host SMBus controller not enabled</h2>
<blockquote>
<p>提示</p>
</blockquote>
<p><code>Host SMBus controller not enabled</code></p>
<blockquote>
<p>解决办法</p>
</blockquote>
<p>网上试了一些办法，在系统中禁止某些启动项是可以的。</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># lsmod | grep i2c_piix4 (有输出的话进行以下步骤)</span></span><br><span class="line"><span class="meta"># vi  /etc/modprobe.d/blacklist.conf</span></span><br><span class="line">blacklist i2c_piix4</span><br><span class="line"><span class="meta"># reboot</span></span><br></pre></td></tr></table></figure>
<p>以上做完之后应该就不会再出现了。</p>
<hr />
]]></content>
      <categories>
        <category>environment</category>
      </categories>
      <tags>
        <tag>environment</tag>
      </tags>
  </entry>
  <entry>
    <title>baidu-201711-CrackMe02</title>
    <url>/writeup/baidu-201711-CrackMe02/</url>
    <content><![CDATA[<h2 id="environment"><a class="markdownIt-Anchor" href="#environment"></a> environment</h2>
<blockquote>
<p>后面会用到python的环境，在这里就先配好，个人用的是 python2.7 的环境，配置如下：</p>
</blockquote>
<a id="more"></a>
<ul>
<li>先到官网上下好<a href="https://www.python.org/downloads/release/python-2715/" target="_blank" rel="noopener">python 2.7</a>的安装包，安装。</li>
<li>用 <code>pip install pycrypto</code>安装加密模块，如果出现<code>error: Microsoft Visual C++ 9.0 is required (Unable to find vcvarsall.bat). Get it from http://aka.ms/vcpython27</code>，我们就去<a href="https://www.microsoft.com/en-us/download/details.aspx?id=44266" target="_blank" rel="noopener">安装</a>一下Windows对python的支持。</li>
<li>上述都做完之后，打开<em>python</em>，输入 <code>from Crypto.Cipher import AES</code>，如果运行没有报错，就是配置成功了。</li>
</ul>
<h2 id="step"><a class="markdownIt-Anchor" href="#step"></a> step</h2>
<blockquote>
<p>做之前可以去看看<a href="https://www.ichunqiu.com/course/56677" target="_blank" rel="noopener">大表哥的整理思路的视频</a>，确实很厉害。<br />
跑这道题算是我学od这么长时间以来最复杂的一个了……跑到吐血</p>
</blockquote>
<h3 id="找切入点"><a class="markdownIt-Anchor" href="#找切入点"></a> 找切入点</h3>
<ul>
<li>打开这道题，发现是一个checkSN，我们打开IDA查看导入地址表和函数引用，这里常用的有两个，分别是 <code>GetWindowTextA</code>和<code>GetDlgItemTextA</code>，我们初步查看后发现<code>GetDlgItemTextA</code>所在的地方是函数的主体，而且整体只有这一个函数，我们用od在<code>GetDlgItemTextA</code>下bp，f9运行。</li>
</ul>
<h3 id="梳理函数逻辑"><a class="markdownIt-Anchor" href="#梳理函数逻辑"></a> 梳理函数逻辑</h3>
<ul>
<li>随便输入几个字符CheckSN，在这里我输入的是“123456”。</li>
<li>一直往下跑，直到 <code>GetDlgItemTextA</code> 函数出现。</li>
</ul>
<img data-src="main1.jpg" width=40%>
<blockquote>
<p>函数往上是在初始化堆栈空间，到了下面的<code>call</code>，能在内存看见输入的’123456‘以16进制放在内存中。<br />
具体来说应该是’12  34  56‘。</p>
</blockquote>
<ul>
<li>继续跟踪，我们在00402653处进入AES解密函数。</li>
</ul>
<img data-src="main2.jpg" width=40%>
<img data-src="main3.jpg" width=40%>
<img data-src="main4.jpg" width=40%>
<blockquote>
<p>先进行AES分组解密，密钥为B1nGzL[4st-TeAm]，IV向量16进制为000102030405060708090A0B0C0D0E0F，使用CBC模式。如果输入转成的16进制长度不是16的倍数，则分组觖密后剩下的会进行ECB模式的解密，密钥不变。 回主流程。</p>
</blockquote>
<img data-src="main5.jpg" width=40%>
<ul>
<li>回到主流程后，得到结果进行base64解码，地址为00401990；之后进入迷宫选择，这里我们看IDA的解析会更清楚一点。</li>
</ul>
<img data-src="jump.jpg" width=40%>
<blockquote>
<p>swich选择。其原值必须为&quot;82QS&quot;中的一个，不然就是进入default，这是一条死亡之路。 switch中的call循环做完之后，在0040273A 检查0018F1E4 是否为1，为1就game over。整理一下内存查看迷宫如下：</p>
</blockquote>
<img data-src="migong.jpg" width=40%>
<blockquote>
<p>8,2保特横向位置不变，纵向分别随着循环向上一格和向下一格；Q，S保持纵向位置不变，横向分别向左一格和向右一格 ;c3为终点，左上ff为起点，沿着0走，路径选择结果为27S281S182S327S287S323Q124S281S1。参与运算的定值为0x2f。依据奇数位字符选择switch case，其右边的偶数位字符-0x30,结果进行累加，最后累加值就是0x2f。</p>
</blockquote>
<ul>
<li>跑完之后，发现只累加到了0x2e，还差1，那么这个1到哪里去找呢？我们打开‘s’的case，发现有一点不一样：</li>
</ul>
<img data-src="calls.jpg" width=40%>
<blockquote>
<p>在00402923处，就是比较取值是否为0的，别的call检查失败直接置标志返回，这里跳到了0040293B，检查取数是否为0xFF，如果是直接返回，不置失败标记。正好到终点处右边为0xff，且S循环一次是右移一格，取数，所以最后加上S1即可。</p>
</blockquote>
<ul>
<li>此题多解原因是如果偶数为0x30，则不进行循环，0x2f累加值也为零，对最后的正确流程没有影响。所以是可以随意附加&quot;20&quot;、“80”、“Q0”、'S0&quot;，从而产生多解。</li>
</ul>
<h3 id="解题脚本"><a class="markdownIt-Anchor" href="#解题脚本"></a> 解题脚本</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">key = <span class="string">'B1nGzL[4st-TeAm]'</span></span><br><span class="line">iv = <span class="string">'\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F'</span></span><br><span class="line">path = <span class="string">'27S281S182S327S287S323Q124S281S1'</span>.encode(<span class="string">'base64'</span>).strip()</span><br><span class="line">m = path + <span class="string">'\x00'</span>*<span class="number">4</span></span><br><span class="line">cryptor = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">cryptortext = cryptor.encrypt(m)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"==================================================="</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'cryptortext:'</span>+cryptortext.encode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'==================================================='</span></span><br></pre></td></tr></table></figure>
<p>结果得到<code>flag{235cfe4e617b3656758e14ca51d981a9e5623be7424a244ae93d8a48cf9cf7f0a84649f35fdd9a47e7afef01dfc9f639}</code></p>
<h3 id="感想"><a class="markdownIt-Anchor" href="#感想"></a> 感想</h3>
<ul>
<li>关于AES的识别，还是直接用IDA的插件来的比较实在，不过最好是能识别出算法的特征，就像下面这个（个人瞎猜，欢迎大佬指正）：</li>
</ul>
<img data-src="AES.jpg" width=40%>
<blockquote>
<p>感觉已经有一点AES的影子了……</p>
</blockquote>
<ul>
<li>迷宫问题还是reverse中的热门问题……虽然很难……</li>
</ul>
<p><a href="https://github.com/jygzyc/blog_backup/raw/master/downloads/CrackMe02.exe" target="_blank" rel="noopener">download</a></p>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
        <tag>reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>ISC训练赛_2016_phrackCTF_Classical CrackMe</title>
    <url>/writeup/ISC%E8%AE%AD%E7%BB%83%E8%B5%9B_2016_phrackCTF_Classical%20CrackMe/</url>
    <content><![CDATA[<h2 id="step"><a class="markdownIt-Anchor" href="#step"></a> step</h2>
<p>1.用IDA打开文件，浏览一下，看到base64加密过的字符串“UENURntFYTV5X0RvX05ldF9DcjRjazNyfQ==”，解码即是flag：PCTF{Ea5y_Do_Net_Cr4ck3r}</p>
<a id="more"></a>
<img data-src="success.jpg" width=40% />
<p><a href="https://github.com/jygzyc/blog-back-up/raw/master/downloads/CrackMe.rar" target="_blank" rel="noopener">download</a></p>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
        <tag>reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>JCTF_2014_小菜一碟</title>
    <url>/writeup/JCTF-2014-%E5%B0%8F%E8%8F%9C%E4%B8%80%E7%A2%9F/</url>
    <content><![CDATA[<ol>
<li>用IDA打开源码，可以看见源码是安卓程序，我们使用jeb对源码进行分析，<a id="more"></a>关于jeb的安装<a href="https://www.52pojie.cn/thread-722648-1-1.html" target="_blank" rel="noopener">点击这里</a>,安装过程所需的jdk1.8_121可以在这里<a href="https://www.filepuma.com/download/java_development_kit_64bit_8.0.1210.13-13999/" target="_blank" rel="noopener">下载</a>。</li>
</ol>
<img data-src="preview.jpg" width=40% />
<blockquote>
<p>IDA查看结果</p>
</blockquote>
<ol start="2">
<li>用jeb打开后直接拖入文件，用ctrl+f直接查找我们再IDA中看见的Congratulation，找到结果。</li>
</ol>
<img data-src="search.jpg" width=40% />
<ol start="3">
<li>热键Q，decompile代码如下，分析代码逻辑：输入字符串后逆置，之后进行MD5，再进行base64，最后与“NzU2ZDJmYzg0ZDA3YTM1NmM4ZjY4ZjcxZmU3NmUxODk=”进行比较，如果相同则输出Congratulations。</li>
</ol>
<img data-src="code.jpg" width=40% />
<ol start="4">
<li>由上所述，逆操作，base64解码“NzU2ZDJmYzg0ZDA3YTM1NmM4ZjY4ZjcxZmU3NmUxODk=”得到“756d2fc84d07a356c8f68f71fe76e189”，再进行<a href="http://www.chamd5.org/" target="_blank" rel="noopener">MD5解码</a>，得到“ }321nimda{galflj”，逆置后得到flag{admin123}。</li>
</ol>
<p><a href="https://github.com/jygzyc/blog_backup/raw/master/downloads/re100" target="_blank" rel="noopener">download</a></p>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
        <tag>reserve</tag>
      </tags>
  </entry>
  <entry>
    <title>baidu_201711_CrackMe01</title>
    <url>/writeup/baidu-201711-CrackMe01/</url>
    <content><![CDATA[<h2 id="step"><a class="markdownIt-Anchor" href="#step"></a> step</h2>
<p>1.跑程序，看到图形框，用IDA开</p>
<a id="more"></a>
<p><img data-src="run.jpg" alt="run" /><br />
<br/></p>
<p>2.寻找常用的函数，先找message，发现有PostMessageW和MessageBoxW,分别双击进入，ctrl+x查看调用</p>
<img data-src="MessageBoxW.jpg" width=40% />
<blockquote>
<p>MessageBoxW</p>
</blockquote>
<img data-src="PostMessageW.jpg" width=30% />
<blockquote>
<p>PostMessageW</p>
</blockquote>
<p>3.发现调用PostMessageW，查看函数，可见将堆的地址传入了函数;没有找到更多信息后查找window函数引用</p>
<img data-src="heap.jpg" width=30% />
<blockquote>
<p>heap</p>
</blockquote>
<img data-src="ShowWindow.jpg" width=40% />
<blockquote>
<p>ShowWindow</p>
</blockquote>
<p>4.进入函数后，发现字符chText，按F5查看伪码</p>
<img data-src="fcode.jpg" width=40% />
<p>5.由伪码可以看见判断，chText和v6逐字节做异或，得出flag，其中(v6 &amp; 0xF00)<mark>1024 &amp;&amp; (v6 &amp; 0xF0)</mark>-80 &amp;&amp; (v6 &amp; 6)==6，我们取v6 &lt; 0xff做一下。chText的值进入IDA可以查看。</p>
<img data-src="chText.jpg" width=20% />
<p>6.编写CPP程序</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;<span class="type">string</span>.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    unsigned int data[]=&#123;<span class="number">0x4F0</span>,  <span class="number">0x4DA</span>,  <span class="number">0x4D7</span>,  <span class="number">0x4D1</span>,  <span class="number">0x48C</span>,  <span class="number">0x4FF</span>,</span><br><span class="line">                        <span class="number">0x4F5</span>,  <span class="number">0x4FE</span>,  <span class="number">0x4E3</span>,  <span class="number">0x4F8</span>,  <span class="number">0x4E7</span>,  <span class="number">0x4FF</span>,</span><br><span class="line">                        <span class="number">0x4E3</span>,  <span class="number">0x4E9</span>,  <span class="number">0x4F0</span>,  <span class="number">0x4F3</span>,  <span class="number">0x485</span>,  <span class="number">0x480</span>,</span><br><span class="line">                        <span class="number">0x484</span>,  <span class="number">0x4F2</span>,  <span class="number">0x4F4</span>,  <span class="number">0x4F3</span>&#125;;</span><br><span class="line">    for(unsigned int i=<span class="number">0</span>;i&lt;<span class="number">0xff</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">		for(unsigned int j=<span class="number">0</span>;j&lt;<span class="number">22</span>;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			printf(<span class="string">"%c"</span>,data[j]^i);</span><br><span class="line">		&#125;</span><br><span class="line">		printf(<span class="string">"<span class="subst">\n</span>%X<span class="subst">\n</span>"</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7.运行得到flag</p>
<p><img data-src="flag.jpg" alt="flag" /></p>
<p><a href="https://github.com/jygzyc/blog_backup/raw/master/downloads/CrackMe01_97D2BF0DBD2EC13065E7104F24CAAED9.zip" target="_blank" rel="noopener">download</a></p>
]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>ctf</tag>
        <tag>reverse</tag>
      </tags>
  </entry>
</search>
